{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "                                                                                                                                                                                                                                        # -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Created on Sun Jul  8 00:11:05 2018\n",
    "\n",
    "@author: somya\n",
    "\"\"\"\n",
    "\n",
    "# numpy and pandas for data manipulation\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# model used for feature importances\n",
    "import lightgbm as lgb\n",
    "\n",
    "# utility for early stopping with a validation set\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# visualizations\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# memory management\n",
    "import gc\n",
    "\n",
    "# utilities\n",
    "from itertools import chain\n",
    "\n",
    "class FeatureSelector():\n",
    "    \"\"\"\n",
    "    Class for performing feature selection for machine learning or data preprocessing.\n",
    "    \n",
    "    Implements five different methods to identify features for removal \n",
    "    \n",
    "        1. Find columns with a missing percentage greater than a specified threshold\n",
    "        2. Find columns with a single unique value\n",
    "        3. Find collinear variables with a correlation greater than a specified correlation coefficient\n",
    "        4. Find features with 0.0 feature importance from a gradient boosting machine (gbm)\n",
    "        5. Find low importance features that do not contribute to a specified cumulative feature importance from the gbm\n",
    "        \n",
    "    Parameters\n",
    "    --------\n",
    "        data : dataframe\n",
    "            A dataset with observations in the rows and features in the columns\n",
    "        labels : array or series, default = None\n",
    "            Array of labels for training the machine learning model to find feature importances. These can be either binary labels\n",
    "            (if task is 'classification') or continuous targets (if task is 'regression').\n",
    "            If no labels are provided, then the feature importance based methods are not available.\n",
    "        \n",
    "    Attributes\n",
    "    --------\n",
    "    \n",
    "    ops : dict\n",
    "        Dictionary of operations run and features identified for removal\n",
    "        \n",
    "    missing_stats : dataframe\n",
    "        The fraction of missing values for all features\n",
    "    \n",
    "    record_missing : dataframe\n",
    "        The fraction of missing values for features with missing fraction above threshold\n",
    "        \n",
    "    unique_stats : dataframe\n",
    "        Number of unique values for all features\n",
    "    \n",
    "    record_single_unique : dataframe\n",
    "        Records the features that have a single unique value\n",
    "        \n",
    "    corr_matrix : dataframe\n",
    "        All correlations between all features in the data\n",
    "    \n",
    "    record_collinear : dataframe\n",
    "        Records the pairs of collinear variables with a correlation coefficient above the threshold\n",
    "        \n",
    "    feature_importances : dataframe\n",
    "        All feature importances from the gradient boosting machine\n",
    "    \n",
    "    record_zero_importance : dataframe\n",
    "        Records the zero importance features in the data according to the gbm\n",
    "    \n",
    "    record_low_importance : dataframe\n",
    "        Records the lowest importance features not needed to reach the threshold of cumulative importance according to the gbm\n",
    "    \n",
    "    \n",
    "    Notes\n",
    "    --------\n",
    "    \n",
    "        - All 5 operations can be run with the `identify_all` method.\n",
    "        - If using feature importances, one-hot encoding is used for categorical variables which creates new columns\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, data, labels=None):\n",
    "        \n",
    "        # Dataset and optional training labels\n",
    "        self.data = data\n",
    "        self.labels = labels\n",
    "\n",
    "        if labels is None:\n",
    "            print('No labels provided. Feature importance based methods are not available.')\n",
    "        \n",
    "        self.base_features = list(data.columns)\n",
    "        self.one_hot_features = None\n",
    "        \n",
    "        # Dataframes recording information about features to remove\n",
    "        self.record_missing = None\n",
    "        self.record_single_unique = None\n",
    "        self.record_collinear = None\n",
    "        self.record_zero_importance = None\n",
    "        self.record_low_importance = None\n",
    "        \n",
    "        self.missing_stats = None\n",
    "        self.unique_stats = None\n",
    "        self.corr_matrix = None\n",
    "        self.feature_importances = None\n",
    "        \n",
    "        # Dictionary to hold removal operations\n",
    "        self.ops = {}\n",
    "        \n",
    "        self.one_hot_correlated = False\n",
    "        \n",
    "    def identify_missing(self, missing_threshold):\n",
    "        \"\"\"Find the features with a fraction of missing values above `missing_threshold`\"\"\"\n",
    "        \n",
    "        self.missing_threshold = missing_threshold\n",
    "\n",
    "        # Calculate the fraction of missing in each column \n",
    "        missing_series = self.data.isnull().sum() / self.data.shape[0]\n",
    "        self.missing_stats = pd.DataFrame(missing_series).rename(columns = {'index': 'feature', 0: 'missing_fraction'})\n",
    "\n",
    "        # Sort with highest number of missing values on top\n",
    "        self.missing_stats = self.missing_stats.sort_values('missing_fraction', ascending = False)\n",
    "\n",
    "        # Find the columns with a missing percentage above the threshold\n",
    "        record_missing = pd.DataFrame(missing_series[missing_series > missing_threshold]).reset_index().rename(columns = \n",
    "                                                                                                               {'index': 'feature', \n",
    "                                                                                                                0: 'missing_fraction'})\n",
    "\n",
    "        to_drop = list(record_missing['feature'])\n",
    "\n",
    "        self.record_missing = record_missing\n",
    "        self.ops['missing'] = to_drop\n",
    "        \n",
    "        print('%d features with greater than %0.2f missing values.\\n' % (len(self.ops['missing']), self.missing_threshold))\n",
    "        \n",
    "    def identify_single_unique(self):\n",
    "        \"\"\"Finds features with only a single unique value. NaNs do not count as a unique value. \"\"\"\n",
    "\n",
    "        # Calculate the unique counts in each column\n",
    "        unique_counts = self.data.nunique()\n",
    "        self.unique_stats = pd.DataFrame(unique_counts).rename(columns = {'index': 'feature', 0: 'nunique'})\n",
    "        self.unique_stats = self.unique_stats.sort_values('nunique', ascending = True)\n",
    "        \n",
    "        # Find the columns with only one unique count\n",
    "        record_single_unique = pd.DataFrame(unique_counts[unique_counts == 1]).reset_index().rename(columns = {'index': 'feature', \n",
    "                                                                                                                0: 'nunique'})\n",
    "\n",
    "        to_drop = list(record_single_unique['feature'])\n",
    "    \n",
    "        self.record_single_unique = record_single_unique\n",
    "        self.ops['single_unique'] = to_drop\n",
    "        \n",
    "        print('%d features with a single unique value.\\n' % len(self.ops['single_unique']))\n",
    "    \n",
    "    def identify_collinear(self, correlation_threshold, one_hot=False):\n",
    "        \"\"\"\n",
    "        Finds collinear features based on the correlation coefficient between features. \n",
    "        For each pair of features with a correlation coefficient greather than `correlation_threshold`,\n",
    "        only one of the pair is identified for removal. \n",
    "        Using code adapted from: https://chrisalbon.com/machine_learning/feature_selection/drop_highly_correlated_features/\n",
    "        \n",
    "        Parameters\n",
    "        --------\n",
    "        correlation_threshold : float between 0 and 1\n",
    "            Value of the Pearson correlation cofficient for identifying correlation features\n",
    "        one_hot : boolean, default = False\n",
    "            Whether to one-hot encode the features before calculating the correlation coefficients\n",
    "        \"\"\"\n",
    "        \n",
    "        self.correlation_threshold = correlation_threshold\n",
    "        self.one_hot_correlated = one_hot\n",
    "        \n",
    "         # Calculate the correlations between every column\n",
    "        if one_hot:\n",
    "            \n",
    "            # One hot encoding\n",
    "            features = pd.get_dummies(self.data)\n",
    "            self.one_hot_features = [column for column in features.columns if column not in self.base_features]\n",
    "\n",
    "            # Add one hot encoded data to original data\n",
    "            self.data_all = pd.concat([features[self.one_hot_features], self.data], axis = 1)\n",
    "            \n",
    "            corr_matrix = pd.get_dummies(features).corr()\n",
    "\n",
    "        else:\n",
    "            corr_matrix = self.data.corr()\n",
    "        \n",
    "        self.corr_matrix = corr_matrix\n",
    "    \n",
    "        # Extract the upper triangle of the correlation matrix\n",
    "        upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k = 1).astype(np.bool))\n",
    "        \n",
    "        # Select the features with correlations above the threshold\n",
    "        # Need to use the absolute value\n",
    "        to_drop = [column for column in upper.columns if any(upper[column].abs() > correlation_threshold)]\n",
    "\n",
    "        # Dataframe to hold correlated pairs\n",
    "        record_collinear = pd.DataFrame(columns = ['drop_feature', 'corr_feature', 'corr_value'])\n",
    "\n",
    "        # Iterate through the columns to drop to record pairs of correlated features\n",
    "        for column in to_drop:\n",
    "\n",
    "            # Find the correlated features\n",
    "            corr_features = list(upper.index[upper[column].abs() > correlation_threshold])\n",
    "\n",
    "            # Find the correlated values\n",
    "            corr_values = list(upper[column][upper[column].abs() > correlation_threshold])\n",
    "            drop_features = [column for _ in range(len(corr_features))]    \n",
    "\n",
    "            # Record the information (need a temp df for now)\n",
    "            temp_df = pd.DataFrame.from_dict({'drop_feature': drop_features,\n",
    "                                             'corr_feature': corr_features,\n",
    "                                             'corr_value': corr_values})\n",
    "\n",
    "            # Add to dataframe\n",
    "            record_collinear = record_collinear.append(temp_df, ignore_index = True)\n",
    "\n",
    "        self.record_collinear = record_collinear\n",
    "        self.ops['collinear'] = to_drop\n",
    "        \n",
    "        print('%d features with a correlation magnitude greater than %0.2f.\\n' % (len(self.ops['collinear']), self.correlation_threshold))\n",
    "\n",
    "    def identify_zero_importance(self, task, eval_metric=None, \n",
    "                                 n_iterations=10, early_stopping = True):\n",
    "        \"\"\"\n",
    "        \n",
    "        Identify the features with zero importance according to a gradient boosting machine.\n",
    "        The gbm can be trained with early stopping using a validation set to prevent overfitting. \n",
    "        The feature importances are averaged over `n_iterations` to reduce variance. \n",
    "        \n",
    "        Uses the LightGBM implementation (http://lightgbm.readthedocs.io/en/latest/index.html)\n",
    "        Parameters \n",
    "        --------\n",
    "        eval_metric : string\n",
    "            Evaluation metric to use for the gradient boosting machine for early stopping. Must be\n",
    "            provided if `early_stopping` is True\n",
    "        task : string\n",
    "            The machine learning task, either 'classification' or 'regression'\n",
    "        n_iterations : int, default = 10\n",
    "            Number of iterations to train the gradient boosting machine\n",
    "            \n",
    "        early_stopping : boolean, default = True\n",
    "            Whether or not to use early stopping with a validation set when training\n",
    "        \n",
    "        \n",
    "        Notes\n",
    "        --------\n",
    "        \n",
    "        - Features are one-hot encoded to handle the categorical variables before training.\n",
    "        - The gbm is not optimized for any particular task and might need some hyperparameter tuning\n",
    "        - Feature importances, including zero importance features, can change across runs\n",
    "        \"\"\"\n",
    "\n",
    "        if early_stopping and eval_metric is None:\n",
    "            raise ValueError(\"\"\"eval metric must be provided with early stopping. Examples include \"auc\" for classification or\n",
    "                             \"l2\" for regression.\"\"\")\n",
    "            \n",
    "        if self.labels is None:\n",
    "            raise ValueError(\"No training labels provided.\")\n",
    "        \n",
    "        # One hot encoding\n",
    "        features = pd.get_dummies(self.data)\n",
    "        self.one_hot_features = [column for column in features.columns if column not in self.base_features]\n",
    "\n",
    "        # Add one hot encoded data to original data\n",
    "        self.data_all = pd.concat([features[self.one_hot_features], self.data], axis = 1)\n",
    "\n",
    "        # Extract feature names\n",
    "        feature_names = list(features.columns)\n",
    "\n",
    "        # Convert to np array\n",
    "        features = np.array(features)\n",
    "        labels = np.array(self.labels).reshape((-1, ))\n",
    "\n",
    "        # Empty array for feature importances\n",
    "        feature_importance_values = np.zeros(len(feature_names))\n",
    "        \n",
    "        print('Training Gradient Boosting Model\\n')\n",
    "        \n",
    "        # Iterate through each fold\n",
    "        for _ in range(n_iterations):\n",
    "\n",
    "            if task == 'classification':\n",
    "                model = lgb.LGBMClassifier(n_estimators=1000, learning_rate = 0.05, verbose = -1)\n",
    "\n",
    "            elif task == 'regression':\n",
    "                model = lgb.LGBMRegressor(n_estimators=1000, learning_rate = 0.05, verbose = -1)\n",
    "\n",
    "            else:\n",
    "                raise ValueError('Task must be either \"classification\" or \"regression\"')\n",
    "                \n",
    "            # If training using early stopping need a validation set\n",
    "            if early_stopping:\n",
    "                \n",
    "                train_features, valid_features, train_labels, valid_labels = train_test_split(features, labels, test_size = 0.15)\n",
    "\n",
    "                # Train the model with early stopping\n",
    "                model.fit(train_features, train_labels, eval_metric = eval_metric,\n",
    "                          eval_set = [(valid_features, valid_labels)],\n",
    "                          early_stopping_rounds = 100, verbose = -1)\n",
    "                \n",
    "                # Clean up memory\n",
    "                gc.enable()\n",
    "                del train_features, train_labels, valid_features, valid_labels\n",
    "                gc.collect()\n",
    "                \n",
    "            else:\n",
    "                model.fit(features, labels)\n",
    "\n",
    "            # Record the feature importances\n",
    "            feature_importance_values += model.feature_importances_ / n_iterations\n",
    "\n",
    "        feature_importances = pd.DataFrame({'feature': feature_names, 'importance': feature_importance_values})\n",
    "\n",
    "        # Sort features according to importance\n",
    "        feature_importances = feature_importances.sort_values('importance', ascending = False).reset_index(drop = True)\n",
    "\n",
    "        # Normalize the feature importances to add up to one\n",
    "        feature_importances['normalized_importance'] = feature_importances['importance'] / feature_importances['importance'].sum()\n",
    "        feature_importances['cumulative_importance'] = np.cumsum(feature_importances['normalized_importance'])\n",
    "\n",
    "        # Extract the features with zero importance\n",
    "        record_zero_importance = feature_importances[feature_importances['importance'] == 0.0]\n",
    "        \n",
    "        to_drop = list(record_zero_importance['feature'])\n",
    "\n",
    "        self.feature_importances = feature_importances\n",
    "        self.record_zero_importance = record_zero_importance\n",
    "        self.ops['zero_importance'] = to_drop\n",
    "        \n",
    "        print('\\n%d features with zero importance after one-hot encoding.\\n' % len(self.ops['zero_importance']))\n",
    "    \n",
    "    def identify_low_importance(self, cumulative_importance):\n",
    "        \"\"\"\n",
    "        Finds the lowest importance features not needed to account for `cumulative_importance` fraction\n",
    "        of the total feature importance from the gradient boosting machine. As an example, if cumulative\n",
    "        importance is set to 0.95, this will retain only the most important features needed to \n",
    "        reach 95% of the total feature importance. The identified features are those not needed.\n",
    "        Parameters\n",
    "        --------\n",
    "        cumulative_importance : float between 0 and 1\n",
    "            The fraction of cumulative importance to account for \n",
    "        \"\"\"\n",
    "\n",
    "        self.cumulative_importance = cumulative_importance\n",
    "        \n",
    "        # The feature importances need to be calculated before running\n",
    "        if self.feature_importances is None:\n",
    "            raise NotImplementedError(\"\"\"Feature importances have not yet been determined. \n",
    "                                         Call the `identify_zero_importance` method first.\"\"\")\n",
    "            \n",
    "        # Make sure most important features are on top\n",
    "        self.feature_importances = self.feature_importances.sort_values('cumulative_importance')\n",
    "\n",
    "        # Identify the features not needed to reach the cumulative_importance\n",
    "        record_low_importance = self.feature_importances[self.feature_importances['cumulative_importance'] > cumulative_importance]\n",
    "\n",
    "        to_drop = list(record_low_importance['feature'])\n",
    "\n",
    "        self.record_low_importance = record_low_importance\n",
    "        self.ops['low_importance'] = to_drop\n",
    "    \n",
    "        print('%d features required for cumulative importance of %0.2f after one hot encoding.' % (len(self.feature_importances) -\n",
    "                                                                            len(self.record_low_importance), self.cumulative_importance))\n",
    "        print('%d features do not contribute to cumulative importance of %0.2f.\\n' % (len(self.ops['low_importance']),\n",
    "                                                                                               self.cumulative_importance))\n",
    "        \n",
    "    def identify_all(self, selection_params):\n",
    "        \"\"\"\n",
    "        Use all five of the methods to identify features to remove.\n",
    "        \n",
    "        Parameters\n",
    "        --------\n",
    "            \n",
    "        selection_params : dict\n",
    "           Parameters to use in the five feature selection methhods.\n",
    "           Params must contain the keys ['missing_threshold', 'correlation_threshold', 'eval_metric', 'task', 'cumulative_importance']\n",
    "        \n",
    "        \"\"\"\n",
    "        \n",
    "        # Check for all required parameters\n",
    "        for param in ['missing_threshold', 'correlation_threshold', 'eval_metric', 'task', 'cumulative_importance']:\n",
    "            if param not in selection_params.keys():\n",
    "                raise ValueError('%s is a required parameter for this method.' % param)\n",
    "        \n",
    "        # Implement each of the five methods\n",
    "        self.identify_missing(selection_params['missing_threshold'])\n",
    "        self.identify_single_unique()\n",
    "        self.identify_collinear(selection_params['correlation_threshold'])\n",
    "        self.identify_zero_importance(task = selection_params['task'], eval_metric = selection_params['eval_metric'])\n",
    "        self.identify_low_importance(selection_params['cumulative_importance'])\n",
    "        \n",
    "        # Find the number of features identified to drop\n",
    "        self.all_identified = set(list(chain(*list(self.ops.values()))))\n",
    "        self.n_identified = len(self.all_identified)\n",
    "        \n",
    "        print('%d total features out of %d identified for removal after one-hot encoding.\\n' % (self.n_identified, \n",
    "                                                                                                  self.data_all.shape[1]))\n",
    "        \n",
    "    def check_removal(self, keep_one_hot=True):\n",
    "        \n",
    "        \"\"\"Check the identified features before removal. Returns a list of the unique features identified.\"\"\"\n",
    "        \n",
    "        self.all_identified = set(list(chain(*list(self.ops.values()))))\n",
    "        print('Total of %d features identified for removal' % len(self.all_identified))\n",
    "        \n",
    "        if not keep_one_hot:\n",
    "            if self.one_hot_features is None:\n",
    "                print('Data has not been one-hot encoded')\n",
    "            else:\n",
    "                one_hot_to_remove = [x for x in self.one_hot_features if x not in self.all_identified]\n",
    "                print('%d additional one-hot features can be removed' % len(one_hot_to_remove))\n",
    "        \n",
    "        return list(self.all_identified)\n",
    "        \n",
    "    \n",
    "    def remove(self, methods, keep_one_hot = True):\n",
    "        \"\"\"\n",
    "        Remove the features from the data according to the specified methods.\n",
    "        \n",
    "        Parameters\n",
    "        --------\n",
    "            methods : 'all' or list of methods\n",
    "                If methods == 'all', any methods that have identified features will be used\n",
    "                Otherwise, only the specified methods will be used.\n",
    "                Can be one of ['missing', 'single_unique', 'collinear', 'zero_importance', 'low_importance']\n",
    "            keep_one_hot : boolean, default = True\n",
    "                Whether or not to keep one-hot encoded features\n",
    "                \n",
    "        Return\n",
    "        --------\n",
    "            data : dataframe\n",
    "                Dataframe with identified features removed\n",
    "                \n",
    "        \n",
    "        Notes \n",
    "        --------\n",
    "            - If feature importances are used, the one-hot encoded columns will be added to the data (and then may be removed)\n",
    "            - Check the features that will be removed before transforming data!\n",
    "        \n",
    "        \"\"\"\n",
    "        \n",
    "        \n",
    "        features_to_drop = []\n",
    "      \n",
    "        if methods == 'all':\n",
    "            \n",
    "            # Need to use one-hot encoded data as well\n",
    "            data = self.data_all\n",
    "                                          \n",
    "            print('{} methods have been run\\n'.format(list(self.ops.keys())))\n",
    "            \n",
    "            # Find the unique features to drop\n",
    "            features_to_drop = set(list(chain(*list(self.ops.values()))))\n",
    "            \n",
    "        else:\n",
    "            # Need to use one-hot encoded data as well\n",
    "            if 'zero_importance' in methods or 'low_importance' in methods or self.one_hot_correlated:\n",
    "                data = self.data_all\n",
    "                \n",
    "            else:\n",
    "                data = self.data\n",
    "                \n",
    "            # Iterate through the specified methods\n",
    "            for method in methods:\n",
    "                \n",
    "                # Check to make sure the method has been run\n",
    "                if method not in self.ops.keys():\n",
    "                    raise NotImplementedError('%s method has not been run' % method)\n",
    "                    \n",
    "                # Append the features identified for removal\n",
    "                else:\n",
    "                    features_to_drop.append(self.ops[method])\n",
    "        \n",
    "            # Find the unique features to drop\n",
    "            features_to_drop = set(list(chain(*features_to_drop)))\n",
    "            \n",
    "        features_to_drop = list(features_to_drop)\n",
    "            \n",
    "        if not keep_one_hot:\n",
    "            \n",
    "            if self.one_hot_features is None:\n",
    "                print('Data has not been one-hot encoded')\n",
    "            else:\n",
    "                             \n",
    "                features_to_drop = list(set(features_to_drop) | set(self.one_hot_features))\n",
    "       \n",
    "        # Remove the features and return the data\n",
    "        data = data.drop(columns = features_to_drop)\n",
    "        self.removed_features = features_to_drop\n",
    "        \n",
    "        if not keep_one_hot:\n",
    "        \tprint('Removed %d features including one-hot features.' % len(features_to_drop))\n",
    "        else:\n",
    "        \tprint('Removed %d features.' % len(features_to_drop))\n",
    "        \n",
    "        return data\n",
    "    \n",
    "    def plot_missing(self):\n",
    "        \"\"\"Histogram of missing fraction in each feature\"\"\"\n",
    "        if self.record_missing is None:\n",
    "            raise NotImplementedError(\"Missing values have not been calculated. Run `identify_missing`\")\n",
    "        \n",
    "        self.reset_plot()\n",
    "        \n",
    "        # Histogram of missing values\n",
    "        plt.style.use('seaborn-white')\n",
    "        plt.figure(figsize = (7, 5))\n",
    "        plt.hist(self.missing_stats['missing_fraction'], bins = np.linspace(0, 1, 11), edgecolor = 'k', color = 'red', linewidth = 1.5)\n",
    "        plt.xticks(np.linspace(0, 1, 11));\n",
    "        plt.xlabel('Missing Fraction', size = 14); plt.ylabel('Count of Features', size = 14); \n",
    "        plt.title(\"Fraction of Missing Values Histogram\", size = 16);\n",
    "        \n",
    "    \n",
    "    def plot_unique(self):\n",
    "        \"\"\"Histogram of number of unique values in each feature\"\"\"\n",
    "        if self.record_single_unique is None:\n",
    "            raise NotImplementedError('Unique values have not been calculated. Run `identify_single_unique`')\n",
    "        \n",
    "        self.reset_plot()\n",
    "\n",
    "        # Histogram of number of unique values\n",
    "        self.unique_stats.plot.hist(edgecolor = 'k', figsize = (7, 5))\n",
    "        plt.ylabel('Frequency', size = 14); plt.xlabel('Unique Values', size = 14); \n",
    "        plt.title('Number of Unique Values Histogram', size = 16);\n",
    "        \n",
    "    \n",
    "    def plot_collinear(self, plot_all = False):\n",
    "        \"\"\"\n",
    "        Heatmap of the correlation values. If plot_all = True plots all the correlations otherwise\n",
    "        plots only those features that have a correlation above the threshold\n",
    "        \n",
    "        Notes\n",
    "        --------\n",
    "            - Not all of the plotted correlations are above the threshold because this plots\n",
    "            all the variables that have been idenfitied as having even one correlation above the threshold\n",
    "            - The features on the x-axis are those that will be removed. The features on the y-axis\n",
    "            are the correlated features with those on the x-axis\n",
    "        \n",
    "        Code adapted from https://seaborn.pydata.org/examples/many_pairwise_correlations.html\n",
    "        \"\"\"\n",
    "        \n",
    "        if self.record_collinear is None:\n",
    "            raise NotImplementedError('Collinear features have not been idenfitied. Run `identify_collinear`.')\n",
    "        \n",
    "        if plot_all:\n",
    "        \tcorr_matrix_plot = self.corr_matrix\n",
    "        \ttitle = 'All Correlations'\n",
    "        \n",
    "        else:\n",
    "\t        # Identify the correlations that were above the threshold\n",
    "\t        # columns (x-axis) are features to drop and rows (y_axis) are correlated pairs\n",
    "\t        corr_matrix_plot = self.corr_matrix.loc[list(set(self.record_collinear['corr_feature'])), \n",
    "\t                                                list(set(self.record_collinear['drop_feature']))]\n",
    "\n",
    "\t        title = \"Correlations Above Threshold\"\n",
    "\n",
    "       \n",
    "        f, ax = plt.subplots(figsize=(10, 8))\n",
    "        \n",
    "        # Diverging colormap\n",
    "        cmap = sns.diverging_palette(220, 10, as_cmap=True)\n",
    "\n",
    "        # Draw the heatmap with a color bar\n",
    "        sns.heatmap(corr_matrix_plot, cmap=cmap, center=0,\n",
    "                    linewidths=.25, cbar_kws={\"shrink\": 0.6})\n",
    "\n",
    "        # Set the ylabels \n",
    "        ax.set_yticks([x + 0.5 for x in list(range(corr_matrix_plot.shape[0]))])\n",
    "        ax.set_yticklabels(list(corr_matrix_plot.index), size = int(160 / corr_matrix_plot.shape[0]));\n",
    "\n",
    "        # Set the xlabels \n",
    "        ax.set_xticks([x + 0.5 for x in list(range(corr_matrix_plot.shape[1]))])\n",
    "        ax.set_xticklabels(list(corr_matrix_plot.columns), size = int(160 / corr_matrix_plot.shape[1]));\n",
    "        plt.title(title, size = 14)\n",
    "        \n",
    "    def plot_feature_importances(self, plot_n = 15, threshold = None):\n",
    "        \"\"\"\n",
    "        Plots `plot_n` most important features and the cumulative importance of features.\n",
    "        If `threshold` is provided, prints the number of features needed to reach `threshold` cumulative importance.\n",
    "        Parameters\n",
    "        --------\n",
    "        \n",
    "        plot_n : int, default = 15\n",
    "            Number of most important features to plot. Defaults to 15 or the maximum number of features whichever is smaller\n",
    "        \n",
    "        threshold : float, between 0 and 1 default = None\n",
    "            Threshold for printing information about cumulative importances\n",
    "        \"\"\"\n",
    "        \n",
    "        if self.record_zero_importance is None:\n",
    "            raise NotImplementedError('Feature importances have not been determined. Run `idenfity_zero_importance`')\n",
    "            \n",
    "        # Need to adjust number of features if greater than the features in the data\n",
    "        if plot_n > self.feature_importances.shape[0]:\n",
    "            plot_n = self.feature_importances.shape[0] - 1\n",
    "\n",
    "        self.reset_plot()\n",
    "        \n",
    "        # Make a horizontal bar chart of feature importances\n",
    "        plt.figure(figsize = (10, 6))\n",
    "        ax = plt.subplot()\n",
    "\n",
    "        # Need to reverse the index to plot most important on top\n",
    "        # There might be a more efficient method to accomplish this\n",
    "        ax.barh(list(reversed(list(self.feature_importances.index[:plot_n]))), \n",
    "                self.feature_importances['normalized_importance'][:plot_n], \n",
    "                align = 'center', edgecolor = 'k')\n",
    "\n",
    "        # Set the yticks and labels\n",
    "        ax.set_yticks(list(reversed(list(self.feature_importances.index[:plot_n]))))\n",
    "        ax.set_yticklabels(self.feature_importances['feature'][:plot_n], size = 12)\n",
    "\n",
    "        # Plot labeling\n",
    "        plt.xlabel('Normalized Importance', size = 16); plt.title('Feature Importances', size = 18)\n",
    "        plt.show()\n",
    "\n",
    "        # Cumulative importance plot\n",
    "        plt.figure(figsize = (6, 4))\n",
    "        plt.plot(list(range(1, len(self.feature_importances) + 1)), self.feature_importances['cumulative_importance'], 'r-')\n",
    "        plt.xlabel('Number of Features', size = 14); plt.ylabel('Cumulative Importance', size = 14); \n",
    "        plt.title('Cumulative Feature Importance', size = 16);\n",
    "\n",
    "        if threshold:\n",
    "\n",
    "            # Index of minimum number of features needed for cumulative importance threshold\n",
    "            # np.where returns the index so need to add 1 to have correct number\n",
    "            importance_index = np.min(np.where(self.feature_importances['cumulative_importance'] > threshold))\n",
    "            plt.vlines(x = importance_index + 1, ymin = 0, ymax = 1, linestyles='--', colors = 'blue')\n",
    "            plt.show();\n",
    "\n",
    "            print('%d features required for %0.2f of cumulative importance' % (importance_index + 1, threshold))\n",
    "\n",
    "    def reset_plot(self):\n",
    "        plt.rcParams = plt.rcParamsDefault"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SK_ID_CURR</th>\n",
       "      <th>TARGET</th>\n",
       "      <th>NAME_CONTRACT_TYPE</th>\n",
       "      <th>CODE_GENDER</th>\n",
       "      <th>FLAG_OWN_CAR</th>\n",
       "      <th>FLAG_OWN_REALTY</th>\n",
       "      <th>CNT_CHILDREN</th>\n",
       "      <th>AMT_INCOME_TOTAL</th>\n",
       "      <th>AMT_CREDIT</th>\n",
       "      <th>AMT_ANNUITY</th>\n",
       "      <th>...</th>\n",
       "      <th>FLAG_DOCUMENT_18</th>\n",
       "      <th>FLAG_DOCUMENT_19</th>\n",
       "      <th>FLAG_DOCUMENT_20</th>\n",
       "      <th>FLAG_DOCUMENT_21</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100002</td>\n",
       "      <td>1</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>202500.0</td>\n",
       "      <td>406597.5</td>\n",
       "      <td>24700.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100003</td>\n",
       "      <td>0</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>1293502.5</td>\n",
       "      <td>35698.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100004</td>\n",
       "      <td>0</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>67500.0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>6750.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100006</td>\n",
       "      <td>0</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>312682.5</td>\n",
       "      <td>29686.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100007</td>\n",
       "      <td>0</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>121500.0</td>\n",
       "      <td>513000.0</td>\n",
       "      <td>21865.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 122 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SK_ID_CURR  TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n",
       "0      100002       1         Cash loans           M            N   \n",
       "1      100003       0         Cash loans           F            N   \n",
       "2      100004       0    Revolving loans           M            Y   \n",
       "3      100006       0         Cash loans           F            N   \n",
       "4      100007       0         Cash loans           M            N   \n",
       "\n",
       "  FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY  \\\n",
       "0               Y             0          202500.0    406597.5      24700.5   \n",
       "1               N             0          270000.0   1293502.5      35698.5   \n",
       "2               Y             0           67500.0    135000.0       6750.0   \n",
       "3               Y             0          135000.0    312682.5      29686.5   \n",
       "4               Y             0          121500.0    513000.0      21865.5   \n",
       "\n",
       "              ...              FLAG_DOCUMENT_18 FLAG_DOCUMENT_19  \\\n",
       "0             ...                             0                0   \n",
       "1             ...                             0                0   \n",
       "2             ...                             0                0   \n",
       "3             ...                             0                0   \n",
       "4             ...                             0                0   \n",
       "\n",
       "  FLAG_DOCUMENT_20 FLAG_DOCUMENT_21 AMT_REQ_CREDIT_BUREAU_HOUR  \\\n",
       "0                0                0                        0.0   \n",
       "1                0                0                        0.0   \n",
       "2                0                0                        0.0   \n",
       "3                0                0                        NaN   \n",
       "4                0                0                        0.0   \n",
       "\n",
       "  AMT_REQ_CREDIT_BUREAU_DAY  AMT_REQ_CREDIT_BUREAU_WEEK  \\\n",
       "0                       0.0                         0.0   \n",
       "1                       0.0                         0.0   \n",
       "2                       0.0                         0.0   \n",
       "3                       NaN                         NaN   \n",
       "4                       0.0                         0.0   \n",
       "\n",
       "   AMT_REQ_CREDIT_BUREAU_MON  AMT_REQ_CREDIT_BUREAU_QRT  \\\n",
       "0                        0.0                        0.0   \n",
       "1                        0.0                        0.0   \n",
       "2                        0.0                        0.0   \n",
       "3                        NaN                        NaN   \n",
       "4                        0.0                        0.0   \n",
       "\n",
       "   AMT_REQ_CREDIT_BUREAU_YEAR  \n",
       "0                         1.0  \n",
       "1                         0.0  \n",
       "2                         0.0  \n",
       "3                         NaN  \n",
       "4                         0.0  \n",
       "\n",
       "[5 rows x 122 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = pd.read_csv('/Users/amy/Desktop/project data/application_train.csv')\n",
    "train_features = train\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    282686\n",
       "1     24825\n",
       "Name: TARGET, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_features[\"TARGET\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### RANDOM UNDER SAMPLING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Class count\n",
    "count_class_0, count_class_1 = train_features.TARGET.value_counts()\n",
    "\n",
    "# Divide by class\n",
    "df_class_0 = train_features[train_features['TARGET'] == 0]\n",
    "df_class_1 = train_features[train_features['TARGET'] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random under-sampling:\n",
      "1    24825\n",
      "0    24825\n",
      "Name: TARGET, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x101959518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_class_0_under = df_class_0.sample(count_class_1)\n",
    "df_test_under = pd.concat([df_class_0_under, df_class_1], axis=0)\n",
    "\n",
    "print('Random under-sampling:')\n",
    "print(df_test_under.TARGET.value_counts())\n",
    "\n",
    "df_test_under.TARGET.value_counts().plot(kind='bar', title='Count (TARGET)');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_labels = df_test_under['TARGET']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = df_test_under.drop(columns = ['TARGET'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "fs = FeatureSelector(data = train, labels = train_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23 features with greater than 0.60 missing values.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fs.identify_missing(missing_threshold=0.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['OWN_CAR_AGE',\n",
       " 'BASEMENTAREA_AVG',\n",
       " 'YEARS_BUILD_AVG',\n",
       " 'COMMONAREA_AVG',\n",
       " 'FLOORSMIN_AVG',\n",
       " 'LANDAREA_AVG',\n",
       " 'LIVINGAPARTMENTS_AVG',\n",
       " 'NONLIVINGAPARTMENTS_AVG',\n",
       " 'BASEMENTAREA_MODE',\n",
       " 'YEARS_BUILD_MODE']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_features = fs.ops['missing']\n",
    "missing_features[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x102749208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fs.plot_missing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missing_fraction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>COMMONAREA_AVG</th>\n",
       "      <td>0.718207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COMMONAREA_MODE</th>\n",
       "      <td>0.718207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COMMONAREA_MEDI</th>\n",
       "      <td>0.718207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NONLIVINGAPARTMENTS_AVG</th>\n",
       "      <td>0.713293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NONLIVINGAPARTMENTS_MODE</th>\n",
       "      <td>0.713293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NONLIVINGAPARTMENTS_MEDI</th>\n",
       "      <td>0.713293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FONDKAPREMONT_MODE</th>\n",
       "      <td>0.704592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LIVINGAPARTMENTS_MEDI</th>\n",
       "      <td>0.703726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LIVINGAPARTMENTS_AVG</th>\n",
       "      <td>0.703726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LIVINGAPARTMENTS_MODE</th>\n",
       "      <td>0.703726</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          missing_fraction\n",
       "COMMONAREA_AVG                    0.718207\n",
       "COMMONAREA_MODE                   0.718207\n",
       "COMMONAREA_MEDI                   0.718207\n",
       "NONLIVINGAPARTMENTS_AVG           0.713293\n",
       "NONLIVINGAPARTMENTS_MODE          0.713293\n",
       "NONLIVINGAPARTMENTS_MEDI          0.713293\n",
       "FONDKAPREMONT_MODE                0.704592\n",
       "LIVINGAPARTMENTS_MEDI             0.703726\n",
       "LIVINGAPARTMENTS_AVG              0.703726\n",
       "LIVINGAPARTMENTS_MODE             0.703726"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "fs.missing_stats.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 features with a single unique value.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fs.identify_single_unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['FLAG_MOBIL', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_12']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "single_unique = fs.ops['single_unique']\n",
    "single_unique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10eee7358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fs.plot_unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nunique</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>COMMONAREA_MEDI</th>\n",
       "      <td>1901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SK_ID_CURR</th>\n",
       "      <td>49650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LANDAREA_MODE</th>\n",
       "      <td>2451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>REG_REGION_NOT_LIVE_REGION</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>REGION_RATING_CLIENT</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            nunique\n",
       "COMMONAREA_MEDI                1901\n",
       "SK_ID_CURR                    49650\n",
       "LANDAREA_MODE                  2451\n",
       "REG_REGION_NOT_LIVE_REGION        2\n",
       "REGION_RATING_CLIENT              3"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs.unique_stats.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29 features with a correlation magnitude greater than 0.97.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fs.identify_collinear(correlation_threshold=0.975)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['AMT_GOODS_PRICE',\n",
       " 'FLAG_EMP_PHONE',\n",
       " 'APARTMENTS_MODE',\n",
       " 'BASEMENTAREA_MODE',\n",
       " 'YEARS_BEGINEXPLUATATION_MODE']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlated_features = fs.ops['collinear']\n",
    "correlated_features[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>drop_feature</th>\n",
       "      <th>corr_feature</th>\n",
       "      <th>corr_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AMT_GOODS_PRICE</td>\n",
       "      <td>AMT_CREDIT</td>\n",
       "      <td>0.985248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FLAG_EMP_PHONE</td>\n",
       "      <td>DAYS_EMPLOYED</td>\n",
       "      <td>-0.999573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>APARTMENTS_MODE</td>\n",
       "      <td>APARTMENTS_AVG</td>\n",
       "      <td>0.978163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BASEMENTAREA_MODE</td>\n",
       "      <td>BASEMENTAREA_AVG</td>\n",
       "      <td>0.977029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>YEARS_BEGINEXPLUATATION_MODE</td>\n",
       "      <td>YEARS_BEGINEXPLUATATION_AVG</td>\n",
       "      <td>0.976238</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   drop_feature                 corr_feature  corr_value\n",
       "0               AMT_GOODS_PRICE                   AMT_CREDIT    0.985248\n",
       "1                FLAG_EMP_PHONE                DAYS_EMPLOYED   -0.999573\n",
       "2               APARTMENTS_MODE               APARTMENTS_AVG    0.978163\n",
       "3             BASEMENTAREA_MODE             BASEMENTAREA_AVG    0.977029\n",
       "4  YEARS_BEGINEXPLUATATION_MODE  YEARS_BEGINEXPLUATATION_AVG    0.976238"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs.record_collinear.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Gradient Boosting Model\n",
      "\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[239]\tvalid_0's auc: 0.76352\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[190]\tvalid_0's auc: 0.752091\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[168]\tvalid_0's auc: 0.748557\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[204]\tvalid_0's auc: 0.756094\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[231]\tvalid_0's auc: 0.755043\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[281]\tvalid_0's auc: 0.756667\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[208]\tvalid_0's auc: 0.749556\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[201]\tvalid_0's auc: 0.75866\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[162]\tvalid_0's auc: 0.755678\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[325]\tvalid_0's auc: 0.742702\n",
      "\n",
      "39 features with zero importance after one-hot encoding.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fs.identify_zero_importance(task = 'classification', eval_metric = 'auc', \n",
    "                            n_iterations = 10, early_stopping = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 121 original features\n",
      "There are 139 one-hot features\n"
     ]
    }
   ],
   "source": [
    "one_hot_features = fs.one_hot_features\n",
    "base_features = fs.base_features\n",
    "print('There are %d original features' % len(base_features))\n",
    "print('There are %d one-hot features' % len(one_hot_features))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SK_ID_CURR</th>\n",
       "      <th>TARGET</th>\n",
       "      <th>NAME_CONTRACT_TYPE</th>\n",
       "      <th>CODE_GENDER</th>\n",
       "      <th>FLAG_OWN_CAR</th>\n",
       "      <th>FLAG_OWN_REALTY</th>\n",
       "      <th>CNT_CHILDREN</th>\n",
       "      <th>AMT_INCOME_TOTAL</th>\n",
       "      <th>AMT_CREDIT</th>\n",
       "      <th>AMT_ANNUITY</th>\n",
       "      <th>...</th>\n",
       "      <th>FLAG_DOCUMENT_18</th>\n",
       "      <th>FLAG_DOCUMENT_19</th>\n",
       "      <th>FLAG_DOCUMENT_20</th>\n",
       "      <th>FLAG_DOCUMENT_21</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100002</td>\n",
       "      <td>1</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>202500.0</td>\n",
       "      <td>406597.5</td>\n",
       "      <td>24700.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100003</td>\n",
       "      <td>0</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>1293502.5</td>\n",
       "      <td>35698.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100004</td>\n",
       "      <td>0</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>67500.0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>6750.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100006</td>\n",
       "      <td>0</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>312682.5</td>\n",
       "      <td>29686.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100007</td>\n",
       "      <td>0</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>121500.0</td>\n",
       "      <td>513000.0</td>\n",
       "      <td>21865.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 122 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SK_ID_CURR  TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n",
       "0      100002       1         Cash loans           M            N   \n",
       "1      100003       0         Cash loans           F            N   \n",
       "2      100004       0    Revolving loans           M            Y   \n",
       "3      100006       0         Cash loans           F            N   \n",
       "4      100007       0         Cash loans           M            N   \n",
       "\n",
       "  FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY  \\\n",
       "0               Y             0          202500.0    406597.5      24700.5   \n",
       "1               N             0          270000.0   1293502.5      35698.5   \n",
       "2               Y             0           67500.0    135000.0       6750.0   \n",
       "3               Y             0          135000.0    312682.5      29686.5   \n",
       "4               Y             0          121500.0    513000.0      21865.5   \n",
       "\n",
       "              ...              FLAG_DOCUMENT_18 FLAG_DOCUMENT_19  \\\n",
       "0             ...                             0                0   \n",
       "1             ...                             0                0   \n",
       "2             ...                             0                0   \n",
       "3             ...                             0                0   \n",
       "4             ...                             0                0   \n",
       "\n",
       "  FLAG_DOCUMENT_20 FLAG_DOCUMENT_21 AMT_REQ_CREDIT_BUREAU_HOUR  \\\n",
       "0                0                0                        0.0   \n",
       "1                0                0                        0.0   \n",
       "2                0                0                        0.0   \n",
       "3                0                0                        NaN   \n",
       "4                0                0                        0.0   \n",
       "\n",
       "  AMT_REQ_CREDIT_BUREAU_DAY  AMT_REQ_CREDIT_BUREAU_WEEK  \\\n",
       "0                       0.0                         0.0   \n",
       "1                       0.0                         0.0   \n",
       "2                       0.0                         0.0   \n",
       "3                       NaN                         NaN   \n",
       "4                       0.0                         0.0   \n",
       "\n",
       "   AMT_REQ_CREDIT_BUREAU_MON  AMT_REQ_CREDIT_BUREAU_QRT  \\\n",
       "0                        0.0                        0.0   \n",
       "1                        0.0                        0.0   \n",
       "2                        0.0                        0.0   \n",
       "3                        NaN                        NaN   \n",
       "4                        0.0                        0.0   \n",
       "\n",
       "   AMT_REQ_CREDIT_BUREAU_YEAR  \n",
       "0                         1.0  \n",
       "1                         0.0  \n",
       "2                         0.0  \n",
       "3                         NaN  \n",
       "4                         0.0  \n",
       "\n",
       "[5 rows x 122 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_features.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NAME_CONTRACT_TYPE_Cash loans</th>\n",
       "      <th>NAME_CONTRACT_TYPE_Revolving loans</th>\n",
       "      <th>CODE_GENDER_F</th>\n",
       "      <th>CODE_GENDER_M</th>\n",
       "      <th>CODE_GENDER_XNA</th>\n",
       "      <th>FLAG_OWN_CAR_N</th>\n",
       "      <th>FLAG_OWN_CAR_Y</th>\n",
       "      <th>FLAG_OWN_REALTY_N</th>\n",
       "      <th>FLAG_OWN_REALTY_Y</th>\n",
       "      <th>NAME_TYPE_SUITE_Children</th>\n",
       "      <th>...</th>\n",
       "      <th>FLAG_DOCUMENT_18</th>\n",
       "      <th>FLAG_DOCUMENT_19</th>\n",
       "      <th>FLAG_DOCUMENT_20</th>\n",
       "      <th>FLAG_DOCUMENT_21</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>307396</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97471</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238573</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240335</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289530</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 260 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        NAME_CONTRACT_TYPE_Cash loans  NAME_CONTRACT_TYPE_Revolving loans  \\\n",
       "307396                              1                                   0   \n",
       "97471                               1                                   0   \n",
       "238573                              1                                   0   \n",
       "240335                              1                                   0   \n",
       "289530                              1                                   0   \n",
       "\n",
       "        CODE_GENDER_F  CODE_GENDER_M  CODE_GENDER_XNA  FLAG_OWN_CAR_N  \\\n",
       "307396              0              1                0               1   \n",
       "97471               1              0                0               1   \n",
       "238573              1              0                0               1   \n",
       "240335              1              0                0               1   \n",
       "289530              1              0                0               0   \n",
       "\n",
       "        FLAG_OWN_CAR_Y  FLAG_OWN_REALTY_N  FLAG_OWN_REALTY_Y  \\\n",
       "307396               0                  0                  1   \n",
       "97471                0                  0                  1   \n",
       "238573               0                  0                  1   \n",
       "240335               0                  0                  1   \n",
       "289530               1                  0                  1   \n",
       "\n",
       "        NAME_TYPE_SUITE_Children             ...              \\\n",
       "307396                         0             ...               \n",
       "97471                          0             ...               \n",
       "238573                         0             ...               \n",
       "240335                         0             ...               \n",
       "289530                         0             ...               \n",
       "\n",
       "        FLAG_DOCUMENT_18  FLAG_DOCUMENT_19  FLAG_DOCUMENT_20  \\\n",
       "307396                 0                 0                 0   \n",
       "97471                  0                 0                 0   \n",
       "238573                 0                 0                 0   \n",
       "240335                 0                 0                 0   \n",
       "289530                 0                 0                 0   \n",
       "\n",
       "        FLAG_DOCUMENT_21  AMT_REQ_CREDIT_BUREAU_HOUR  \\\n",
       "307396                 0                         0.0   \n",
       "97471                  0                         0.0   \n",
       "238573                 0                         0.0   \n",
       "240335                 0                         0.0   \n",
       "289530                 0                         0.0   \n",
       "\n",
       "        AMT_REQ_CREDIT_BUREAU_DAY  AMT_REQ_CREDIT_BUREAU_WEEK  \\\n",
       "307396                        0.0                         0.0   \n",
       "97471                         0.0                         0.0   \n",
       "238573                        1.0                         0.0   \n",
       "240335                        0.0                         0.0   \n",
       "289530                        0.0                         0.0   \n",
       "\n",
       "        AMT_REQ_CREDIT_BUREAU_MON  AMT_REQ_CREDIT_BUREAU_QRT  \\\n",
       "307396                        0.0                        1.0   \n",
       "97471                         0.0                        0.0   \n",
       "238573                        0.0                        0.0   \n",
       "240335                        0.0                        2.0   \n",
       "289530                        0.0                        0.0   \n",
       "\n",
       "        AMT_REQ_CREDIT_BUREAU_YEAR  \n",
       "307396                         1.0  \n",
       "97471                          0.0  \n",
       "238573                         4.0  \n",
       "240335                         2.0  \n",
       "289530                         1.0  \n",
       "\n",
       "[5 rows x 260 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs.data_all.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['FLAG_DOCUMENT_21',\n",
       " 'ORGANIZATION_TYPE_Industry: type 6',\n",
       " 'ORGANIZATION_TYPE_XNA',\n",
       " 'ORGANIZATION_TYPE_Cleaning',\n",
       " 'ORGANIZATION_TYPE_Insurance',\n",
       " 'FLAG_DOCUMENT_10',\n",
       " 'FLAG_DOCUMENT_7',\n",
       " 'ORGANIZATION_TYPE_Industry: type 8',\n",
       " 'ORGANIZATION_TYPE_Industry: type 7',\n",
       " 'FLAG_DOCUMENT_4',\n",
       " 'NAME_INCOME_TYPE_Businessman',\n",
       " 'ORGANIZATION_TYPE_Industry: type 5',\n",
       " 'OCCUPATION_TYPE_IT staff',\n",
       " 'OCCUPATION_TYPE_HR staff',\n",
       " 'ORGANIZATION_TYPE_Industry: type 2',\n",
       " 'FLAG_MOBIL',\n",
       " 'ORGANIZATION_TYPE_Industry: type 13',\n",
       " 'ORGANIZATION_TYPE_Industry: type 12',\n",
       " 'FLAG_DOCUMENT_12',\n",
       " 'FLAG_CONT_MOBILE',\n",
       " 'FLAG_DOCUMENT_20',\n",
       " 'ORGANIZATION_TYPE_Industry: type 10',\n",
       " 'ORGANIZATION_TYPE_Advertising',\n",
       " 'ORGANIZATION_TYPE_Religion',\n",
       " 'FLAG_DOCUMENT_19',\n",
       " 'FLAG_DOCUMENT_9',\n",
       " 'FLAG_DOCUMENT_17',\n",
       " 'NAME_EDUCATION_TYPE_Academic degree',\n",
       " 'ORGANIZATION_TYPE_Legal Services',\n",
       " 'ORGANIZATION_TYPE_Trade: type 1',\n",
       " 'CODE_GENDER_XNA',\n",
       " 'NAME_INCOME_TYPE_Unemployed',\n",
       " 'NAME_TYPE_SUITE_Group of people',\n",
       " 'ORGANIZATION_TYPE_Trade: type 4',\n",
       " 'ORGANIZATION_TYPE_Trade: type 5',\n",
       " 'NAME_INCOME_TYPE_Student',\n",
       " 'NAME_INCOME_TYPE_Maternity leave',\n",
       " 'ORGANIZATION_TYPE_Culture',\n",
       " 'FLAG_DOCUMENT_2']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "zero_importance_features= fs.ops['zero_importance']\n",
    "zero_importance_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1427cadd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10eee76a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 features required for 0.99 of cumulative importance\n"
     ]
    }
   ],
   "source": [
    "fs.plot_feature_importances(threshold = 0.99, plot_n = 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "      <th>normalized_importance</th>\n",
       "      <th>cumulative_importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>EXT_SOURCE_1</td>\n",
       "      <td>494.2</td>\n",
       "      <td>0.074574</td>\n",
       "      <td>0.074574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>EXT_SOURCE_3</td>\n",
       "      <td>476.7</td>\n",
       "      <td>0.071933</td>\n",
       "      <td>0.146507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>EXT_SOURCE_2</td>\n",
       "      <td>417.1</td>\n",
       "      <td>0.062939</td>\n",
       "      <td>0.209446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DAYS_BIRTH</td>\n",
       "      <td>345.2</td>\n",
       "      <td>0.052090</td>\n",
       "      <td>0.261536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AMT_CREDIT</td>\n",
       "      <td>332.7</td>\n",
       "      <td>0.050204</td>\n",
       "      <td>0.311740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AMT_ANNUITY</td>\n",
       "      <td>278.4</td>\n",
       "      <td>0.042010</td>\n",
       "      <td>0.353750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AMT_GOODS_PRICE</td>\n",
       "      <td>260.3</td>\n",
       "      <td>0.039279</td>\n",
       "      <td>0.393029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>DAYS_ID_PUBLISH</td>\n",
       "      <td>244.1</td>\n",
       "      <td>0.036834</td>\n",
       "      <td>0.429863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DAYS_EMPLOYED</td>\n",
       "      <td>230.7</td>\n",
       "      <td>0.034812</td>\n",
       "      <td>0.464675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>DAYS_LAST_PHONE_CHANGE</td>\n",
       "      <td>210.4</td>\n",
       "      <td>0.031749</td>\n",
       "      <td>0.496424</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  feature  importance  normalized_importance  \\\n",
       "0            EXT_SOURCE_1       494.2               0.074574   \n",
       "1            EXT_SOURCE_3       476.7               0.071933   \n",
       "2            EXT_SOURCE_2       417.1               0.062939   \n",
       "3              DAYS_BIRTH       345.2               0.052090   \n",
       "4              AMT_CREDIT       332.7               0.050204   \n",
       "5             AMT_ANNUITY       278.4               0.042010   \n",
       "6         AMT_GOODS_PRICE       260.3               0.039279   \n",
       "7         DAYS_ID_PUBLISH       244.1               0.036834   \n",
       "8           DAYS_EMPLOYED       230.7               0.034812   \n",
       "9  DAYS_LAST_PHONE_CHANGE       210.4               0.031749   \n",
       "\n",
       "   cumulative_importance  \n",
       "0               0.074574  \n",
       "1               0.146507  \n",
       "2               0.209446  \n",
       "3               0.261536  \n",
       "4               0.311740  \n",
       "5               0.353750  \n",
       "6               0.393029  \n",
       "7               0.429863  \n",
       "8               0.464675  \n",
       "9               0.496424  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs.feature_importances.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 features required for cumulative importance of 0.99 after one hot encoding.\n",
      "102 features do not contribute to cumulative importance of 0.99.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fs.identify_low_importance(cumulative_importance = 0.99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['OCCUPATION_TYPE_Waiters/barmen staff',\n",
       " 'FLAG_DOCUMENT_8',\n",
       " 'ORGANIZATION_TYPE_Hotel',\n",
       " 'OCCUPATION_TYPE_Medicine staff',\n",
       " 'FLAG_DOCUMENT_6']"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low_importance_features = fs.ops['low_importance']\n",
    "low_importance_features[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23 features with greater than 0.60 missing values.\n",
      "\n",
      "3 features with a single unique value.\n",
      "\n",
      "25 features with a correlation magnitude greater than 0.98.\n",
      "\n",
      "Training Gradient Boosting Model\n",
      "\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[159]\tvalid_0's auc: 0.758853\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[185]\tvalid_0's auc: 0.762286\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[186]\tvalid_0's auc: 0.758751\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[257]\tvalid_0's auc: 0.762025\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[183]\tvalid_0's auc: 0.753937\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[150]\tvalid_0's auc: 0.76221\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[167]\tvalid_0's auc: 0.758977\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[262]\tvalid_0's auc: 0.761032\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[195]\tvalid_0's auc: 0.74996\n",
      "Training until validation scores don't improve for 100 rounds.\n",
      "Early stopping, best iteration is:\n",
      "[169]\tvalid_0's auc: 0.755463\n",
      "\n",
      "41 features with zero importance after one-hot encoding.\n",
      "\n",
      "141 features required for cumulative importance of 0.99 after one hot encoding.\n",
      "103 features do not contribute to cumulative importance of 0.99.\n",
      "\n",
      "138 total features out of 260 identified for removal after one-hot encoding.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "fs=  FeatureSelector(data = train, labels = train_labels)\n",
    "\n",
    "fs.identify_all(selection_params = {'missing_threshold': 0.6, 'correlation_threshold': 0.98, \n",
    "                                    'task': 'classification', 'eval_metric': 'auc', \n",
    "                                     'cumulative_importance': 0.99})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed 174 features including one-hot features.\n"
     ]
    }
   ],
   "source": [
    "train_no_missing_zero = fs.remove(methods = ['missing', 'zero_importance'], keep_one_hot = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SK_ID_CURR</th>\n",
       "      <th>NAME_CONTRACT_TYPE</th>\n",
       "      <th>CODE_GENDER</th>\n",
       "      <th>FLAG_OWN_CAR</th>\n",
       "      <th>FLAG_OWN_REALTY</th>\n",
       "      <th>CNT_CHILDREN</th>\n",
       "      <th>AMT_INCOME_TOTAL</th>\n",
       "      <th>AMT_CREDIT</th>\n",
       "      <th>AMT_ANNUITY</th>\n",
       "      <th>AMT_GOODS_PRICE</th>\n",
       "      <th>...</th>\n",
       "      <th>FLAG_DOCUMENT_14</th>\n",
       "      <th>FLAG_DOCUMENT_15</th>\n",
       "      <th>FLAG_DOCUMENT_16</th>\n",
       "      <th>FLAG_DOCUMENT_18</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>307396</th>\n",
       "      <td>456129</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>298512.0</td>\n",
       "      <td>29655.0</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97471</th>\n",
       "      <td>213165</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>85500.0</td>\n",
       "      <td>71955.0</td>\n",
       "      <td>7749.0</td>\n",
       "      <td>67500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238573</th>\n",
       "      <td>376296</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>149256.0</td>\n",
       "      <td>16204.5</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240335</th>\n",
       "      <td>378363</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>675000.0</td>\n",
       "      <td>21906.0</td>\n",
       "      <td>675000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289530</th>\n",
       "      <td>435426</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>553806.0</td>\n",
       "      <td>26770.5</td>\n",
       "      <td>495000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78225</th>\n",
       "      <td>190689</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>81000.0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>9580.5</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76712</th>\n",
       "      <td>188958</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>2</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>423000.0</td>\n",
       "      <td>25560.0</td>\n",
       "      <td>423000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216704</th>\n",
       "      <td>351095</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>157500.0</td>\n",
       "      <td>247500.0</td>\n",
       "      <td>12375.0</td>\n",
       "      <td>247500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207558</th>\n",
       "      <td>340579</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>21888.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193866</th>\n",
       "      <td>324807</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>247500.0</td>\n",
       "      <td>254700.0</td>\n",
       "      <td>14751.0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60477</th>\n",
       "      <td>170117</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>2</td>\n",
       "      <td>140400.0</td>\n",
       "      <td>472500.0</td>\n",
       "      <td>44991.0</td>\n",
       "      <td>454500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>275363</th>\n",
       "      <td>419107</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>3</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>482449.5</td>\n",
       "      <td>18315.0</td>\n",
       "      <td>333000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84971</th>\n",
       "      <td>198578</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>6457.5</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307380</th>\n",
       "      <td>456105</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>1005120.0</td>\n",
       "      <td>29389.5</td>\n",
       "      <td>720000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>271037</th>\n",
       "      <td>414201</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>550080.0</td>\n",
       "      <td>15255.0</td>\n",
       "      <td>360000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108596</th>\n",
       "      <td>225962</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>1350000.0</td>\n",
       "      <td>57330.0</td>\n",
       "      <td>1350000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28917</th>\n",
       "      <td>133601</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>553500.0</td>\n",
       "      <td>30024.0</td>\n",
       "      <td>553500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47600</th>\n",
       "      <td>155139</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>157500.0</td>\n",
       "      <td>584775.0</td>\n",
       "      <td>55651.5</td>\n",
       "      <td>562500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213304</th>\n",
       "      <td>347179</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>640080.0</td>\n",
       "      <td>29970.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62235</th>\n",
       "      <td>172179</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>202500.0</td>\n",
       "      <td>10125.0</td>\n",
       "      <td>202500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177118</th>\n",
       "      <td>305252</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>207000.0</td>\n",
       "      <td>143910.0</td>\n",
       "      <td>17208.0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188336</th>\n",
       "      <td>318348</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>169650.0</td>\n",
       "      <td>1090926.0</td>\n",
       "      <td>41683.5</td>\n",
       "      <td>1003500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22366</th>\n",
       "      <td>126033</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>607500.0</td>\n",
       "      <td>21951.0</td>\n",
       "      <td>607500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216180</th>\n",
       "      <td>350483</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>226512.0</td>\n",
       "      <td>2025000.0</td>\n",
       "      <td>51192.0</td>\n",
       "      <td>2025000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280829</th>\n",
       "      <td>425316</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>634360.5</td>\n",
       "      <td>32517.0</td>\n",
       "      <td>567000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234796</th>\n",
       "      <td>371986</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>10165.5</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108923</th>\n",
       "      <td>226336</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>67500.0</td>\n",
       "      <td>260640.0</td>\n",
       "      <td>27499.5</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255500</th>\n",
       "      <td>395643</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>32746.5</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264876</th>\n",
       "      <td>406727</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>193500.0</td>\n",
       "      <td>521280.0</td>\n",
       "      <td>28278.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70472</th>\n",
       "      <td>181756</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>144000.0</td>\n",
       "      <td>348264.0</td>\n",
       "      <td>20124.0</td>\n",
       "      <td>315000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307123</th>\n",
       "      <td>455819</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>1149628.5</td>\n",
       "      <td>48838.5</td>\n",
       "      <td>1057500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307126</th>\n",
       "      <td>455822</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>30573.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307133</th>\n",
       "      <td>455830</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>6750.0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307162</th>\n",
       "      <td>455865</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>30573.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307177</th>\n",
       "      <td>455880</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>260640.0</td>\n",
       "      <td>28197.0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307183</th>\n",
       "      <td>455886</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>328405.5</td>\n",
       "      <td>26077.5</td>\n",
       "      <td>283500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307248</th>\n",
       "      <td>455964</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>27324.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307256</th>\n",
       "      <td>455973</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>58500.0</td>\n",
       "      <td>183384.0</td>\n",
       "      <td>14485.5</td>\n",
       "      <td>162000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307266</th>\n",
       "      <td>455983</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>189000.0</td>\n",
       "      <td>604413.0</td>\n",
       "      <td>25537.5</td>\n",
       "      <td>459000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307268</th>\n",
       "      <td>455985</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>355536.0</td>\n",
       "      <td>19417.5</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307283</th>\n",
       "      <td>456000</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>130500.0</td>\n",
       "      <td>306306.0</td>\n",
       "      <td>13108.5</td>\n",
       "      <td>247500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307285</th>\n",
       "      <td>456002</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>76500.0</td>\n",
       "      <td>284400.0</td>\n",
       "      <td>13963.5</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307288</th>\n",
       "      <td>456005</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>601470.0</td>\n",
       "      <td>30838.5</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307310</th>\n",
       "      <td>456034</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>490536.0</td>\n",
       "      <td>23989.5</td>\n",
       "      <td>405000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307323</th>\n",
       "      <td>456047</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>58500.0</td>\n",
       "      <td>448056.0</td>\n",
       "      <td>17019.0</td>\n",
       "      <td>315000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307328</th>\n",
       "      <td>456052</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>316125.0</td>\n",
       "      <td>15372.0</td>\n",
       "      <td>261000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307363</th>\n",
       "      <td>456088</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>29250.0</td>\n",
       "      <td>663093.0</td>\n",
       "      <td>21519.0</td>\n",
       "      <td>553500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307377</th>\n",
       "      <td>456102</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>67500.0</td>\n",
       "      <td>313438.5</td>\n",
       "      <td>20943.0</td>\n",
       "      <td>283500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307383</th>\n",
       "      <td>456108</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>457834.5</td>\n",
       "      <td>33444.0</td>\n",
       "      <td>378000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307386</th>\n",
       "      <td>456112</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>221832.0</td>\n",
       "      <td>17653.5</td>\n",
       "      <td>175500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307407</th>\n",
       "      <td>456140</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>261000.0</td>\n",
       "      <td>711454.5</td>\n",
       "      <td>47673.0</td>\n",
       "      <td>643500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307410</th>\n",
       "      <td>456143</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>85500.0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>8059.5</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307433</th>\n",
       "      <td>456171</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>50400.0</td>\n",
       "      <td>113760.0</td>\n",
       "      <td>7731.0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307438</th>\n",
       "      <td>456176</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>171000.0</td>\n",
       "      <td>1436850.0</td>\n",
       "      <td>42142.5</td>\n",
       "      <td>1125000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307446</th>\n",
       "      <td>456184</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>900000.0</td>\n",
       "      <td>40671.0</td>\n",
       "      <td>900000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307448</th>\n",
       "      <td>456186</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>207000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>32746.5</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307475</th>\n",
       "      <td>456215</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>144000.0</td>\n",
       "      <td>1303200.0</td>\n",
       "      <td>46809.0</td>\n",
       "      <td>1125000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307481</th>\n",
       "      <td>456225</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>297000.0</td>\n",
       "      <td>19975.5</td>\n",
       "      <td>297000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307489</th>\n",
       "      <td>456233</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>521280.0</td>\n",
       "      <td>23089.5</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307509</th>\n",
       "      <td>456254</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>171000.0</td>\n",
       "      <td>370107.0</td>\n",
       "      <td>20205.0</td>\n",
       "      <td>319500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>49650 rows × 86 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        SK_ID_CURR NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n",
       "307396      456129         Cash loans           M            N   \n",
       "97471       213165         Cash loans           F            N   \n",
       "238573      376296         Cash loans           F            N   \n",
       "240335      378363         Cash loans           F            N   \n",
       "289530      435426         Cash loans           F            Y   \n",
       "78225       190689         Cash loans           M            N   \n",
       "76712       188958         Cash loans           F            N   \n",
       "216704      351095    Revolving loans           F            N   \n",
       "207558      340579         Cash loans           M            Y   \n",
       "193866      324807         Cash loans           F            N   \n",
       "60477       170117         Cash loans           F            Y   \n",
       "275363      419107         Cash loans           M            N   \n",
       "84971       198578         Cash loans           F            N   \n",
       "307380      456105         Cash loans           M            Y   \n",
       "271037      414201         Cash loans           F            Y   \n",
       "108596      225962         Cash loans           F            N   \n",
       "28917       133601         Cash loans           F            N   \n",
       "47600       155139         Cash loans           F            N   \n",
       "213304      347179         Cash loans           M            N   \n",
       "62235       172179    Revolving loans           F            Y   \n",
       "177118      305252         Cash loans           M            N   \n",
       "188336      318348         Cash loans           M            Y   \n",
       "22366       126033         Cash loans           F            N   \n",
       "216180      350483         Cash loans           F            Y   \n",
       "280829      425316         Cash loans           F            N   \n",
       "234796      371986         Cash loans           F            Y   \n",
       "108923      226336         Cash loans           F            N   \n",
       "255500      395643         Cash loans           M            Y   \n",
       "264876      406727         Cash loans           M            Y   \n",
       "70472       181756         Cash loans           M            Y   \n",
       "...            ...                ...         ...          ...   \n",
       "307123      455819         Cash loans           M            Y   \n",
       "307126      455822         Cash loans           M            Y   \n",
       "307133      455830    Revolving loans           F            N   \n",
       "307162      455865         Cash loans           M            N   \n",
       "307177      455880         Cash loans           M            N   \n",
       "307183      455886         Cash loans           F            N   \n",
       "307248      455964         Cash loans           F            N   \n",
       "307256      455973         Cash loans           F            N   \n",
       "307266      455983         Cash loans           M            Y   \n",
       "307268      455985         Cash loans           M            N   \n",
       "307283      456000         Cash loans           M            Y   \n",
       "307285      456002         Cash loans           F            N   \n",
       "307288      456005         Cash loans           F            N   \n",
       "307310      456034         Cash loans           M            N   \n",
       "307323      456047         Cash loans           F            N   \n",
       "307328      456052         Cash loans           M            Y   \n",
       "307363      456088         Cash loans           F            Y   \n",
       "307377      456102         Cash loans           M            N   \n",
       "307383      456108         Cash loans           F            N   \n",
       "307386      456112         Cash loans           F            N   \n",
       "307407      456140         Cash loans           F            Y   \n",
       "307410      456143         Cash loans           F            N   \n",
       "307433      456171         Cash loans           M            N   \n",
       "307438      456176         Cash loans           M            N   \n",
       "307446      456184         Cash loans           M            N   \n",
       "307448      456186         Cash loans           M            N   \n",
       "307475      456215         Cash loans           F            N   \n",
       "307481      456225         Cash loans           M            N   \n",
       "307489      456233         Cash loans           F            N   \n",
       "307509      456254         Cash loans           F            N   \n",
       "\n",
       "       FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  \\\n",
       "307396               Y             0          135000.0    298512.0   \n",
       "97471                Y             0           85500.0     71955.0   \n",
       "238573               Y             0           90000.0    149256.0   \n",
       "240335               Y             0           90000.0    675000.0   \n",
       "289530               Y             0          225000.0    553806.0   \n",
       "78225                Y             0           81000.0     90000.0   \n",
       "76712                Y             2          112500.0    423000.0   \n",
       "216704               Y             1          157500.0    247500.0   \n",
       "207558               Y             0          117000.0    450000.0   \n",
       "193866               N             0          247500.0    254700.0   \n",
       "60477                Y             2          140400.0    472500.0   \n",
       "275363               Y             3           90000.0    482449.5   \n",
       "84971                Y             0           45000.0    112500.0   \n",
       "307380               N             0          225000.0   1005120.0   \n",
       "271037               Y             0          135000.0    550080.0   \n",
       "108596               Y             0          135000.0   1350000.0   \n",
       "28917                Y             0          225000.0    553500.0   \n",
       "47600                Y             0          157500.0    584775.0   \n",
       "213304               Y             0          135000.0    640080.0   \n",
       "62235                Y             1          112500.0    202500.0   \n",
       "177118               N             0          207000.0    143910.0   \n",
       "188336               Y             0          169650.0   1090926.0   \n",
       "22366                N             1           90000.0    607500.0   \n",
       "216180               N             0          226512.0   2025000.0   \n",
       "280829               N             0          180000.0    634360.5   \n",
       "234796               Y             0          180000.0    225000.0   \n",
       "108923               Y             0           67500.0    260640.0   \n",
       "255500               N             0          225000.0    450000.0   \n",
       "264876               N             2          193500.0    521280.0   \n",
       "70472                Y             0          144000.0    348264.0   \n",
       "...                ...           ...               ...         ...   \n",
       "307123               Y             1          225000.0   1149628.5   \n",
       "307126               N             2          112500.0    450000.0   \n",
       "307133               Y             0           90000.0    135000.0   \n",
       "307162               N             0          180000.0    450000.0   \n",
       "307177               N             0          135000.0    260640.0   \n",
       "307183               Y             0          180000.0    328405.5   \n",
       "307248               Y             0          112500.0    450000.0   \n",
       "307256               Y             0           58500.0    183384.0   \n",
       "307266               N             0          189000.0    604413.0   \n",
       "307268               N             0          135000.0    355536.0   \n",
       "307283               Y             0          130500.0    306306.0   \n",
       "307285               Y             0           76500.0    284400.0   \n",
       "307288               Y             0           90000.0    601470.0   \n",
       "307310               Y             0           90000.0    490536.0   \n",
       "307323               Y             0           58500.0    448056.0   \n",
       "307328               N             1          135000.0    316125.0   \n",
       "307363               Y             0           29250.0    663093.0   \n",
       "307377               Y             0           67500.0    313438.5   \n",
       "307383               Y             1          135000.0    457834.5   \n",
       "307386               Y             0          135000.0    221832.0   \n",
       "307407               Y             1          261000.0    711454.5   \n",
       "307410               Y             0           85500.0    180000.0   \n",
       "307433               Y             0           50400.0    113760.0   \n",
       "307438               Y             0          171000.0   1436850.0   \n",
       "307446               N             0          270000.0    900000.0   \n",
       "307448               N             1          207000.0    450000.0   \n",
       "307475               N             1          144000.0   1303200.0   \n",
       "307481               Y             0          225000.0    297000.0   \n",
       "307489               Y             0          225000.0    521280.0   \n",
       "307509               Y             0          171000.0    370107.0   \n",
       "\n",
       "        AMT_ANNUITY  AMT_GOODS_PRICE             ...              \\\n",
       "307396      29655.0         270000.0             ...               \n",
       "97471        7749.0          67500.0             ...               \n",
       "238573      16204.5         135000.0             ...               \n",
       "240335      21906.0         675000.0             ...               \n",
       "289530      26770.5         495000.0             ...               \n",
       "78225        9580.5          90000.0             ...               \n",
       "76712       25560.0         423000.0             ...               \n",
       "216704      12375.0         247500.0             ...               \n",
       "207558      21888.0         450000.0             ...               \n",
       "193866      14751.0         225000.0             ...               \n",
       "60477       44991.0         454500.0             ...               \n",
       "275363      18315.0         333000.0             ...               \n",
       "84971        6457.5         112500.0             ...               \n",
       "307380      29389.5         720000.0             ...               \n",
       "271037      15255.0         360000.0             ...               \n",
       "108596      57330.0        1350000.0             ...               \n",
       "28917       30024.0         553500.0             ...               \n",
       "47600       55651.5         562500.0             ...               \n",
       "213304      29970.0         450000.0             ...               \n",
       "62235       10125.0         202500.0             ...               \n",
       "177118      17208.0         135000.0             ...               \n",
       "188336      41683.5        1003500.0             ...               \n",
       "22366       21951.0         607500.0             ...               \n",
       "216180      51192.0        2025000.0             ...               \n",
       "280829      32517.0         567000.0             ...               \n",
       "234796      10165.5         225000.0             ...               \n",
       "108923      27499.5         225000.0             ...               \n",
       "255500      32746.5         450000.0             ...               \n",
       "264876      28278.0         450000.0             ...               \n",
       "70472       20124.0         315000.0             ...               \n",
       "...             ...              ...             ...               \n",
       "307123      48838.5        1057500.0             ...               \n",
       "307126      30573.0         450000.0             ...               \n",
       "307133       6750.0         135000.0             ...               \n",
       "307162      30573.0         450000.0             ...               \n",
       "307177      28197.0         225000.0             ...               \n",
       "307183      26077.5         283500.0             ...               \n",
       "307248      27324.0         450000.0             ...               \n",
       "307256      14485.5         162000.0             ...               \n",
       "307266      25537.5         459000.0             ...               \n",
       "307268      19417.5         270000.0             ...               \n",
       "307283      13108.5         247500.0             ...               \n",
       "307285      13963.5         225000.0             ...               \n",
       "307288      30838.5         450000.0             ...               \n",
       "307310      23989.5         405000.0             ...               \n",
       "307323      17019.0         315000.0             ...               \n",
       "307328      15372.0         261000.0             ...               \n",
       "307363      21519.0         553500.0             ...               \n",
       "307377      20943.0         283500.0             ...               \n",
       "307383      33444.0         378000.0             ...               \n",
       "307386      17653.5         175500.0             ...               \n",
       "307407      47673.0         643500.0             ...               \n",
       "307410       8059.5         180000.0             ...               \n",
       "307433       7731.0          90000.0             ...               \n",
       "307438      42142.5        1125000.0             ...               \n",
       "307446      40671.0         900000.0             ...               \n",
       "307448      32746.5         450000.0             ...               \n",
       "307475      46809.0        1125000.0             ...               \n",
       "307481      19975.5         297000.0             ...               \n",
       "307489      23089.5         450000.0             ...               \n",
       "307509      20205.0         319500.0             ...               \n",
       "\n",
       "       FLAG_DOCUMENT_14 FLAG_DOCUMENT_15 FLAG_DOCUMENT_16 FLAG_DOCUMENT_18  \\\n",
       "307396                0                0                0                0   \n",
       "97471                 0                0                0                0   \n",
       "238573                0                0                0                0   \n",
       "240335                0                0                0                0   \n",
       "289530                0                0                0                0   \n",
       "78225                 0                0                0                0   \n",
       "76712                 0                0                0                0   \n",
       "216704                0                0                0                0   \n",
       "207558                0                0                0                0   \n",
       "193866                0                0                0                0   \n",
       "60477                 0                0                0                0   \n",
       "275363                0                0                0                0   \n",
       "84971                 0                0                0                0   \n",
       "307380                0                0                0                0   \n",
       "271037                0                0                1                0   \n",
       "108596                0                0                0                0   \n",
       "28917                 0                0                0                0   \n",
       "47600                 0                0                0                0   \n",
       "213304                0                0                0                0   \n",
       "62235                 0                0                0                0   \n",
       "177118                0                0                0                0   \n",
       "188336                0                0                0                0   \n",
       "22366                 0                0                0                0   \n",
       "216180                0                0                0                0   \n",
       "280829                0                0                0                0   \n",
       "234796                0                0                0                0   \n",
       "108923                0                0                0                0   \n",
       "255500                0                0                0                0   \n",
       "264876                0                0                0                0   \n",
       "70472                 0                0                0                0   \n",
       "...                 ...              ...              ...              ...   \n",
       "307123                0                0                0                0   \n",
       "307126                0                0                0                0   \n",
       "307133                0                0                0                0   \n",
       "307162                0                0                0                0   \n",
       "307177                0                0                0                0   \n",
       "307183                0                0                0                0   \n",
       "307248                0                0                0                0   \n",
       "307256                0                0                0                0   \n",
       "307266                0                0                0                0   \n",
       "307268                0                0                0                0   \n",
       "307283                0                0                0                0   \n",
       "307285                0                0                0                0   \n",
       "307288                0                0                0                0   \n",
       "307310                0                0                0                0   \n",
       "307323                0                0                0                0   \n",
       "307328                0                0                0                0   \n",
       "307363                0                0                0                0   \n",
       "307377                0                0                0                0   \n",
       "307383                0                0                0                0   \n",
       "307386                0                0                0                0   \n",
       "307407                0                0                0                0   \n",
       "307410                0                0                0                0   \n",
       "307433                0                0                0                0   \n",
       "307438                0                0                0                0   \n",
       "307446                0                0                0                0   \n",
       "307448                0                0                0                0   \n",
       "307475                0                0                0                0   \n",
       "307481                0                0                0                0   \n",
       "307489                0                0                0                0   \n",
       "307509                0                0                0                0   \n",
       "\n",
       "       AMT_REQ_CREDIT_BUREAU_HOUR  AMT_REQ_CREDIT_BUREAU_DAY  \\\n",
       "307396                        0.0                        0.0   \n",
       "97471                         0.0                        0.0   \n",
       "238573                        0.0                        1.0   \n",
       "240335                        0.0                        0.0   \n",
       "289530                        0.0                        0.0   \n",
       "78225                         0.0                        0.0   \n",
       "76712                         0.0                        0.0   \n",
       "216704                        0.0                        0.0   \n",
       "207558                        0.0                        0.0   \n",
       "193866                        0.0                        0.0   \n",
       "60477                         0.0                        0.0   \n",
       "275363                        0.0                        0.0   \n",
       "84971                         0.0                        0.0   \n",
       "307380                        0.0                        0.0   \n",
       "271037                        0.0                        0.0   \n",
       "108596                        0.0                        0.0   \n",
       "28917                         0.0                        0.0   \n",
       "47600                         0.0                        0.0   \n",
       "213304                        0.0                        0.0   \n",
       "62235                         0.0                        0.0   \n",
       "177118                        0.0                        0.0   \n",
       "188336                        NaN                        NaN   \n",
       "22366                         0.0                        0.0   \n",
       "216180                        0.0                        0.0   \n",
       "280829                        0.0                        0.0   \n",
       "234796                        0.0                        0.0   \n",
       "108923                        0.0                        0.0   \n",
       "255500                        0.0                        0.0   \n",
       "264876                        0.0                        0.0   \n",
       "70472                         0.0                        0.0   \n",
       "...                           ...                        ...   \n",
       "307123                        0.0                        0.0   \n",
       "307126                        0.0                        0.0   \n",
       "307133                        0.0                        0.0   \n",
       "307162                        0.0                        0.0   \n",
       "307177                        0.0                        0.0   \n",
       "307183                        0.0                        0.0   \n",
       "307248                        0.0                        2.0   \n",
       "307256                        NaN                        NaN   \n",
       "307266                        0.0                        0.0   \n",
       "307268                        NaN                        NaN   \n",
       "307283                        0.0                        0.0   \n",
       "307285                        0.0                        0.0   \n",
       "307288                        NaN                        NaN   \n",
       "307310                        0.0                        0.0   \n",
       "307323                        0.0                        0.0   \n",
       "307328                        NaN                        NaN   \n",
       "307363                        0.0                        0.0   \n",
       "307377                        NaN                        NaN   \n",
       "307383                        0.0                        0.0   \n",
       "307386                        0.0                        0.0   \n",
       "307407                        0.0                        0.0   \n",
       "307410                        0.0                        0.0   \n",
       "307433                        0.0                        0.0   \n",
       "307438                        0.0                        0.0   \n",
       "307446                        NaN                        NaN   \n",
       "307448                        0.0                        0.0   \n",
       "307475                        0.0                        0.0   \n",
       "307481                        0.0                        0.0   \n",
       "307489                        0.0                        0.0   \n",
       "307509                        0.0                        0.0   \n",
       "\n",
       "        AMT_REQ_CREDIT_BUREAU_WEEK  AMT_REQ_CREDIT_BUREAU_MON  \\\n",
       "307396                         0.0                        0.0   \n",
       "97471                          0.0                        0.0   \n",
       "238573                         0.0                        0.0   \n",
       "240335                         0.0                        0.0   \n",
       "289530                         0.0                        0.0   \n",
       "78225                          0.0                        0.0   \n",
       "76712                          0.0                        0.0   \n",
       "216704                         0.0                        1.0   \n",
       "207558                         0.0                        1.0   \n",
       "193866                         0.0                        0.0   \n",
       "60477                          0.0                        0.0   \n",
       "275363                         0.0                        0.0   \n",
       "84971                          0.0                        0.0   \n",
       "307380                         0.0                        0.0   \n",
       "271037                         0.0                        0.0   \n",
       "108596                         0.0                        0.0   \n",
       "28917                          0.0                        0.0   \n",
       "47600                          0.0                        0.0   \n",
       "213304                         0.0                        0.0   \n",
       "62235                          0.0                        0.0   \n",
       "177118                         0.0                        1.0   \n",
       "188336                         NaN                        NaN   \n",
       "22366                          0.0                        0.0   \n",
       "216180                         0.0                        0.0   \n",
       "280829                         0.0                        0.0   \n",
       "234796                         0.0                        0.0   \n",
       "108923                         0.0                        0.0   \n",
       "255500                         1.0                        0.0   \n",
       "264876                         0.0                        0.0   \n",
       "70472                          0.0                        0.0   \n",
       "...                            ...                        ...   \n",
       "307123                         0.0                        0.0   \n",
       "307126                         0.0                        0.0   \n",
       "307133                         0.0                        0.0   \n",
       "307162                         0.0                        1.0   \n",
       "307177                         0.0                        0.0   \n",
       "307183                         0.0                        1.0   \n",
       "307248                         0.0                        0.0   \n",
       "307256                         NaN                        NaN   \n",
       "307266                         0.0                        0.0   \n",
       "307268                         NaN                        NaN   \n",
       "307283                         0.0                        1.0   \n",
       "307285                         0.0                        0.0   \n",
       "307288                         NaN                        NaN   \n",
       "307310                         0.0                        0.0   \n",
       "307323                         0.0                        0.0   \n",
       "307328                         NaN                        NaN   \n",
       "307363                         0.0                        1.0   \n",
       "307377                         NaN                        NaN   \n",
       "307383                         0.0                        0.0   \n",
       "307386                         0.0                        0.0   \n",
       "307407                         0.0                        1.0   \n",
       "307410                         0.0                        0.0   \n",
       "307433                         0.0                        0.0   \n",
       "307438                         0.0                        0.0   \n",
       "307446                         NaN                        NaN   \n",
       "307448                         0.0                        0.0   \n",
       "307475                         0.0                        1.0   \n",
       "307481                         0.0                        0.0   \n",
       "307489                         0.0                        0.0   \n",
       "307509                         0.0                        0.0   \n",
       "\n",
       "        AMT_REQ_CREDIT_BUREAU_QRT  AMT_REQ_CREDIT_BUREAU_YEAR  \n",
       "307396                        1.0                         1.0  \n",
       "97471                         0.0                         0.0  \n",
       "238573                        0.0                         4.0  \n",
       "240335                        2.0                         2.0  \n",
       "289530                        0.0                         1.0  \n",
       "78225                         1.0                         3.0  \n",
       "76712                         0.0                         5.0  \n",
       "216704                        0.0                         2.0  \n",
       "207558                        0.0                         2.0  \n",
       "193866                        0.0                         1.0  \n",
       "60477                         1.0                         1.0  \n",
       "275363                        0.0                         3.0  \n",
       "84971                         0.0                         2.0  \n",
       "307380                        0.0                         4.0  \n",
       "271037                        0.0                         0.0  \n",
       "108596                        0.0                         4.0  \n",
       "28917                         1.0                         3.0  \n",
       "47600                         1.0                         8.0  \n",
       "213304                        0.0                         1.0  \n",
       "62235                         0.0                         0.0  \n",
       "177118                        0.0                         1.0  \n",
       "188336                        NaN                         NaN  \n",
       "22366                         0.0                         3.0  \n",
       "216180                        0.0                         0.0  \n",
       "280829                        0.0                         1.0  \n",
       "234796                        1.0                         0.0  \n",
       "108923                        2.0                         3.0  \n",
       "255500                        0.0                         2.0  \n",
       "264876                        0.0                         1.0  \n",
       "70472                         0.0                         3.0  \n",
       "...                           ...                         ...  \n",
       "307123                        3.0                         2.0  \n",
       "307126                        0.0                         0.0  \n",
       "307133                        0.0                         1.0  \n",
       "307162                        0.0                         3.0  \n",
       "307177                        0.0                         1.0  \n",
       "307183                        0.0                         2.0  \n",
       "307248                        0.0                         2.0  \n",
       "307256                        NaN                         NaN  \n",
       "307266                        0.0                         2.0  \n",
       "307268                        NaN                         NaN  \n",
       "307283                        0.0                         0.0  \n",
       "307285                        3.0                         1.0  \n",
       "307288                        NaN                         NaN  \n",
       "307310                        0.0                         2.0  \n",
       "307323                        0.0                         1.0  \n",
       "307328                        NaN                         NaN  \n",
       "307363                        0.0                         5.0  \n",
       "307377                        NaN                         NaN  \n",
       "307383                        0.0                         2.0  \n",
       "307386                        0.0                         7.0  \n",
       "307407                        0.0                         1.0  \n",
       "307410                        0.0                         2.0  \n",
       "307433                        0.0                         4.0  \n",
       "307438                        1.0                         2.0  \n",
       "307446                        NaN                         NaN  \n",
       "307448                        0.0                         2.0  \n",
       "307475                        0.0                         6.0  \n",
       "307481                        0.0                         3.0  \n",
       "307489                        1.0                         2.0  \n",
       "307509                        0.0                         0.0  \n",
       "\n",
       "[49650 rows x 86 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_no_missing_zero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['missing', 'single_unique', 'collinear', 'zero_importance', 'low_importance'] methods have been run\n",
      "\n",
      "Removed 197 features including one-hot features.\n"
     ]
    }
   ],
   "source": [
    "train_removed_all = fs.remove(methods = 'all', keep_one_hot=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SK_ID_CURR</th>\n",
       "      <th>NAME_CONTRACT_TYPE</th>\n",
       "      <th>CODE_GENDER</th>\n",
       "      <th>FLAG_OWN_CAR</th>\n",
       "      <th>FLAG_OWN_REALTY</th>\n",
       "      <th>CNT_CHILDREN</th>\n",
       "      <th>AMT_INCOME_TOTAL</th>\n",
       "      <th>AMT_CREDIT</th>\n",
       "      <th>AMT_ANNUITY</th>\n",
       "      <th>NAME_TYPE_SUITE</th>\n",
       "      <th>...</th>\n",
       "      <th>FLAG_DOCUMENT_11</th>\n",
       "      <th>FLAG_DOCUMENT_13</th>\n",
       "      <th>FLAG_DOCUMENT_14</th>\n",
       "      <th>FLAG_DOCUMENT_16</th>\n",
       "      <th>FLAG_DOCUMENT_18</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>307396</th>\n",
       "      <td>456129</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>298512.0</td>\n",
       "      <td>29655.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97471</th>\n",
       "      <td>213165</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>85500.0</td>\n",
       "      <td>71955.0</td>\n",
       "      <td>7749.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238573</th>\n",
       "      <td>376296</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>149256.0</td>\n",
       "      <td>16204.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240335</th>\n",
       "      <td>378363</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>675000.0</td>\n",
       "      <td>21906.0</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289530</th>\n",
       "      <td>435426</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>553806.0</td>\n",
       "      <td>26770.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78225</th>\n",
       "      <td>190689</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>81000.0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>9580.5</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76712</th>\n",
       "      <td>188958</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>2</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>423000.0</td>\n",
       "      <td>25560.0</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216704</th>\n",
       "      <td>351095</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>157500.0</td>\n",
       "      <td>247500.0</td>\n",
       "      <td>12375.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207558</th>\n",
       "      <td>340579</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>21888.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193866</th>\n",
       "      <td>324807</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>247500.0</td>\n",
       "      <td>254700.0</td>\n",
       "      <td>14751.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60477</th>\n",
       "      <td>170117</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>2</td>\n",
       "      <td>140400.0</td>\n",
       "      <td>472500.0</td>\n",
       "      <td>44991.0</td>\n",
       "      <td>Spouse, partner</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>275363</th>\n",
       "      <td>419107</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>3</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>482449.5</td>\n",
       "      <td>18315.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84971</th>\n",
       "      <td>198578</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>6457.5</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307380</th>\n",
       "      <td>456105</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>1005120.0</td>\n",
       "      <td>29389.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>271037</th>\n",
       "      <td>414201</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>550080.0</td>\n",
       "      <td>15255.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108596</th>\n",
       "      <td>225962</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>1350000.0</td>\n",
       "      <td>57330.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28917</th>\n",
       "      <td>133601</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>553500.0</td>\n",
       "      <td>30024.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47600</th>\n",
       "      <td>155139</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>157500.0</td>\n",
       "      <td>584775.0</td>\n",
       "      <td>55651.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213304</th>\n",
       "      <td>347179</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>640080.0</td>\n",
       "      <td>29970.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62235</th>\n",
       "      <td>172179</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>202500.0</td>\n",
       "      <td>10125.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177118</th>\n",
       "      <td>305252</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>207000.0</td>\n",
       "      <td>143910.0</td>\n",
       "      <td>17208.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188336</th>\n",
       "      <td>318348</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>169650.0</td>\n",
       "      <td>1090926.0</td>\n",
       "      <td>41683.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22366</th>\n",
       "      <td>126033</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>607500.0</td>\n",
       "      <td>21951.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216180</th>\n",
       "      <td>350483</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>226512.0</td>\n",
       "      <td>2025000.0</td>\n",
       "      <td>51192.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280829</th>\n",
       "      <td>425316</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>634360.5</td>\n",
       "      <td>32517.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234796</th>\n",
       "      <td>371986</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>10165.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108923</th>\n",
       "      <td>226336</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>67500.0</td>\n",
       "      <td>260640.0</td>\n",
       "      <td>27499.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255500</th>\n",
       "      <td>395643</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>32746.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264876</th>\n",
       "      <td>406727</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>193500.0</td>\n",
       "      <td>521280.0</td>\n",
       "      <td>28278.0</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70472</th>\n",
       "      <td>181756</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>144000.0</td>\n",
       "      <td>348264.0</td>\n",
       "      <td>20124.0</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307123</th>\n",
       "      <td>455819</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>1149628.5</td>\n",
       "      <td>48838.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307126</th>\n",
       "      <td>455822</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>30573.0</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307133</th>\n",
       "      <td>455830</td>\n",
       "      <td>Revolving loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>6750.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307162</th>\n",
       "      <td>455865</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>30573.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307177</th>\n",
       "      <td>455880</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>260640.0</td>\n",
       "      <td>28197.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307183</th>\n",
       "      <td>455886</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>328405.5</td>\n",
       "      <td>26077.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307248</th>\n",
       "      <td>455964</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>112500.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>27324.0</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307256</th>\n",
       "      <td>455973</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>58500.0</td>\n",
       "      <td>183384.0</td>\n",
       "      <td>14485.5</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307266</th>\n",
       "      <td>455983</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>189000.0</td>\n",
       "      <td>604413.0</td>\n",
       "      <td>25537.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307268</th>\n",
       "      <td>455985</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>355536.0</td>\n",
       "      <td>19417.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307283</th>\n",
       "      <td>456000</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>130500.0</td>\n",
       "      <td>306306.0</td>\n",
       "      <td>13108.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307285</th>\n",
       "      <td>456002</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>76500.0</td>\n",
       "      <td>284400.0</td>\n",
       "      <td>13963.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307288</th>\n",
       "      <td>456005</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>601470.0</td>\n",
       "      <td>30838.5</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307310</th>\n",
       "      <td>456034</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>490536.0</td>\n",
       "      <td>23989.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307323</th>\n",
       "      <td>456047</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>58500.0</td>\n",
       "      <td>448056.0</td>\n",
       "      <td>17019.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307328</th>\n",
       "      <td>456052</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>316125.0</td>\n",
       "      <td>15372.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307363</th>\n",
       "      <td>456088</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>29250.0</td>\n",
       "      <td>663093.0</td>\n",
       "      <td>21519.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307377</th>\n",
       "      <td>456102</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>67500.0</td>\n",
       "      <td>313438.5</td>\n",
       "      <td>20943.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307383</th>\n",
       "      <td>456108</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>457834.5</td>\n",
       "      <td>33444.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307386</th>\n",
       "      <td>456112</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>221832.0</td>\n",
       "      <td>17653.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307407</th>\n",
       "      <td>456140</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>261000.0</td>\n",
       "      <td>711454.5</td>\n",
       "      <td>47673.0</td>\n",
       "      <td>Spouse, partner</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307410</th>\n",
       "      <td>456143</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>85500.0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>8059.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307433</th>\n",
       "      <td>456171</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>50400.0</td>\n",
       "      <td>113760.0</td>\n",
       "      <td>7731.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307438</th>\n",
       "      <td>456176</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>171000.0</td>\n",
       "      <td>1436850.0</td>\n",
       "      <td>42142.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307446</th>\n",
       "      <td>456184</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>900000.0</td>\n",
       "      <td>40671.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307448</th>\n",
       "      <td>456186</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>207000.0</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>32746.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307475</th>\n",
       "      <td>456215</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>144000.0</td>\n",
       "      <td>1303200.0</td>\n",
       "      <td>46809.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307481</th>\n",
       "      <td>456225</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>297000.0</td>\n",
       "      <td>19975.5</td>\n",
       "      <td>Family</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307489</th>\n",
       "      <td>456233</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>521280.0</td>\n",
       "      <td>23089.5</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307509</th>\n",
       "      <td>456254</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>171000.0</td>\n",
       "      <td>370107.0</td>\n",
       "      <td>20205.0</td>\n",
       "      <td>Unaccompanied</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>49650 rows × 63 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        SK_ID_CURR NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n",
       "307396      456129         Cash loans           M            N   \n",
       "97471       213165         Cash loans           F            N   \n",
       "238573      376296         Cash loans           F            N   \n",
       "240335      378363         Cash loans           F            N   \n",
       "289530      435426         Cash loans           F            Y   \n",
       "78225       190689         Cash loans           M            N   \n",
       "76712       188958         Cash loans           F            N   \n",
       "216704      351095    Revolving loans           F            N   \n",
       "207558      340579         Cash loans           M            Y   \n",
       "193866      324807         Cash loans           F            N   \n",
       "60477       170117         Cash loans           F            Y   \n",
       "275363      419107         Cash loans           M            N   \n",
       "84971       198578         Cash loans           F            N   \n",
       "307380      456105         Cash loans           M            Y   \n",
       "271037      414201         Cash loans           F            Y   \n",
       "108596      225962         Cash loans           F            N   \n",
       "28917       133601         Cash loans           F            N   \n",
       "47600       155139         Cash loans           F            N   \n",
       "213304      347179         Cash loans           M            N   \n",
       "62235       172179    Revolving loans           F            Y   \n",
       "177118      305252         Cash loans           M            N   \n",
       "188336      318348         Cash loans           M            Y   \n",
       "22366       126033         Cash loans           F            N   \n",
       "216180      350483         Cash loans           F            Y   \n",
       "280829      425316         Cash loans           F            N   \n",
       "234796      371986         Cash loans           F            Y   \n",
       "108923      226336         Cash loans           F            N   \n",
       "255500      395643         Cash loans           M            Y   \n",
       "264876      406727         Cash loans           M            Y   \n",
       "70472       181756         Cash loans           M            Y   \n",
       "...            ...                ...         ...          ...   \n",
       "307123      455819         Cash loans           M            Y   \n",
       "307126      455822         Cash loans           M            Y   \n",
       "307133      455830    Revolving loans           F            N   \n",
       "307162      455865         Cash loans           M            N   \n",
       "307177      455880         Cash loans           M            N   \n",
       "307183      455886         Cash loans           F            N   \n",
       "307248      455964         Cash loans           F            N   \n",
       "307256      455973         Cash loans           F            N   \n",
       "307266      455983         Cash loans           M            Y   \n",
       "307268      455985         Cash loans           M            N   \n",
       "307283      456000         Cash loans           M            Y   \n",
       "307285      456002         Cash loans           F            N   \n",
       "307288      456005         Cash loans           F            N   \n",
       "307310      456034         Cash loans           M            N   \n",
       "307323      456047         Cash loans           F            N   \n",
       "307328      456052         Cash loans           M            Y   \n",
       "307363      456088         Cash loans           F            Y   \n",
       "307377      456102         Cash loans           M            N   \n",
       "307383      456108         Cash loans           F            N   \n",
       "307386      456112         Cash loans           F            N   \n",
       "307407      456140         Cash loans           F            Y   \n",
       "307410      456143         Cash loans           F            N   \n",
       "307433      456171         Cash loans           M            N   \n",
       "307438      456176         Cash loans           M            N   \n",
       "307446      456184         Cash loans           M            N   \n",
       "307448      456186         Cash loans           M            N   \n",
       "307475      456215         Cash loans           F            N   \n",
       "307481      456225         Cash loans           M            N   \n",
       "307489      456233         Cash loans           F            N   \n",
       "307509      456254         Cash loans           F            N   \n",
       "\n",
       "       FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  \\\n",
       "307396               Y             0          135000.0    298512.0   \n",
       "97471                Y             0           85500.0     71955.0   \n",
       "238573               Y             0           90000.0    149256.0   \n",
       "240335               Y             0           90000.0    675000.0   \n",
       "289530               Y             0          225000.0    553806.0   \n",
       "78225                Y             0           81000.0     90000.0   \n",
       "76712                Y             2          112500.0    423000.0   \n",
       "216704               Y             1          157500.0    247500.0   \n",
       "207558               Y             0          117000.0    450000.0   \n",
       "193866               N             0          247500.0    254700.0   \n",
       "60477                Y             2          140400.0    472500.0   \n",
       "275363               Y             3           90000.0    482449.5   \n",
       "84971                Y             0           45000.0    112500.0   \n",
       "307380               N             0          225000.0   1005120.0   \n",
       "271037               Y             0          135000.0    550080.0   \n",
       "108596               Y             0          135000.0   1350000.0   \n",
       "28917                Y             0          225000.0    553500.0   \n",
       "47600                Y             0          157500.0    584775.0   \n",
       "213304               Y             0          135000.0    640080.0   \n",
       "62235                Y             1          112500.0    202500.0   \n",
       "177118               N             0          207000.0    143910.0   \n",
       "188336               Y             0          169650.0   1090926.0   \n",
       "22366                N             1           90000.0    607500.0   \n",
       "216180               N             0          226512.0   2025000.0   \n",
       "280829               N             0          180000.0    634360.5   \n",
       "234796               Y             0          180000.0    225000.0   \n",
       "108923               Y             0           67500.0    260640.0   \n",
       "255500               N             0          225000.0    450000.0   \n",
       "264876               N             2          193500.0    521280.0   \n",
       "70472                Y             0          144000.0    348264.0   \n",
       "...                ...           ...               ...         ...   \n",
       "307123               Y             1          225000.0   1149628.5   \n",
       "307126               N             2          112500.0    450000.0   \n",
       "307133               Y             0           90000.0    135000.0   \n",
       "307162               N             0          180000.0    450000.0   \n",
       "307177               N             0          135000.0    260640.0   \n",
       "307183               Y             0          180000.0    328405.5   \n",
       "307248               Y             0          112500.0    450000.0   \n",
       "307256               Y             0           58500.0    183384.0   \n",
       "307266               N             0          189000.0    604413.0   \n",
       "307268               N             0          135000.0    355536.0   \n",
       "307283               Y             0          130500.0    306306.0   \n",
       "307285               Y             0           76500.0    284400.0   \n",
       "307288               Y             0           90000.0    601470.0   \n",
       "307310               Y             0           90000.0    490536.0   \n",
       "307323               Y             0           58500.0    448056.0   \n",
       "307328               N             1          135000.0    316125.0   \n",
       "307363               Y             0           29250.0    663093.0   \n",
       "307377               Y             0           67500.0    313438.5   \n",
       "307383               Y             1          135000.0    457834.5   \n",
       "307386               Y             0          135000.0    221832.0   \n",
       "307407               Y             1          261000.0    711454.5   \n",
       "307410               Y             0           85500.0    180000.0   \n",
       "307433               Y             0           50400.0    113760.0   \n",
       "307438               Y             0          171000.0   1436850.0   \n",
       "307446               N             0          270000.0    900000.0   \n",
       "307448               N             1          207000.0    450000.0   \n",
       "307475               N             1          144000.0   1303200.0   \n",
       "307481               Y             0          225000.0    297000.0   \n",
       "307489               Y             0          225000.0    521280.0   \n",
       "307509               Y             0          171000.0    370107.0   \n",
       "\n",
       "        AMT_ANNUITY  NAME_TYPE_SUITE             ...              \\\n",
       "307396      29655.0    Unaccompanied             ...               \n",
       "97471        7749.0    Unaccompanied             ...               \n",
       "238573      16204.5    Unaccompanied             ...               \n",
       "240335      21906.0           Family             ...               \n",
       "289530      26770.5    Unaccompanied             ...               \n",
       "78225        9580.5           Family             ...               \n",
       "76712       25560.0           Family             ...               \n",
       "216704      12375.0    Unaccompanied             ...               \n",
       "207558      21888.0    Unaccompanied             ...               \n",
       "193866      14751.0    Unaccompanied             ...               \n",
       "60477       44991.0  Spouse, partner             ...               \n",
       "275363      18315.0    Unaccompanied             ...               \n",
       "84971        6457.5           Family             ...               \n",
       "307380      29389.5    Unaccompanied             ...               \n",
       "271037      15255.0    Unaccompanied             ...               \n",
       "108596      57330.0    Unaccompanied             ...               \n",
       "28917       30024.0    Unaccompanied             ...               \n",
       "47600       55651.5    Unaccompanied             ...               \n",
       "213304      29970.0    Unaccompanied             ...               \n",
       "62235       10125.0    Unaccompanied             ...               \n",
       "177118      17208.0    Unaccompanied             ...               \n",
       "188336      41683.5    Unaccompanied             ...               \n",
       "22366       21951.0    Unaccompanied             ...               \n",
       "216180      51192.0    Unaccompanied             ...               \n",
       "280829      32517.0    Unaccompanied             ...               \n",
       "234796      10165.5    Unaccompanied             ...               \n",
       "108923      27499.5    Unaccompanied             ...               \n",
       "255500      32746.5    Unaccompanied             ...               \n",
       "264876      28278.0           Family             ...               \n",
       "70472       20124.0           Family             ...               \n",
       "...             ...              ...             ...               \n",
       "307123      48838.5    Unaccompanied             ...               \n",
       "307126      30573.0           Family             ...               \n",
       "307133       6750.0    Unaccompanied             ...               \n",
       "307162      30573.0    Unaccompanied             ...               \n",
       "307177      28197.0    Unaccompanied             ...               \n",
       "307183      26077.5    Unaccompanied             ...               \n",
       "307248      27324.0           Family             ...               \n",
       "307256      14485.5           Family             ...               \n",
       "307266      25537.5    Unaccompanied             ...               \n",
       "307268      19417.5    Unaccompanied             ...               \n",
       "307283      13108.5    Unaccompanied             ...               \n",
       "307285      13963.5    Unaccompanied             ...               \n",
       "307288      30838.5           Family             ...               \n",
       "307310      23989.5    Unaccompanied             ...               \n",
       "307323      17019.0    Unaccompanied             ...               \n",
       "307328      15372.0    Unaccompanied             ...               \n",
       "307363      21519.0    Unaccompanied             ...               \n",
       "307377      20943.0    Unaccompanied             ...               \n",
       "307383      33444.0    Unaccompanied             ...               \n",
       "307386      17653.5    Unaccompanied             ...               \n",
       "307407      47673.0  Spouse, partner             ...               \n",
       "307410       8059.5    Unaccompanied             ...               \n",
       "307433       7731.0    Unaccompanied             ...               \n",
       "307438      42142.5    Unaccompanied             ...               \n",
       "307446      40671.0    Unaccompanied             ...               \n",
       "307448      32746.5    Unaccompanied             ...               \n",
       "307475      46809.0    Unaccompanied             ...               \n",
       "307481      19975.5           Family             ...               \n",
       "307489      23089.5    Unaccompanied             ...               \n",
       "307509      20205.0    Unaccompanied             ...               \n",
       "\n",
       "       FLAG_DOCUMENT_11 FLAG_DOCUMENT_13 FLAG_DOCUMENT_14 FLAG_DOCUMENT_16  \\\n",
       "307396                0                0                0                0   \n",
       "97471                 0                0                0                0   \n",
       "238573                0                0                0                0   \n",
       "240335                0                0                0                0   \n",
       "289530                0                0                0                0   \n",
       "78225                 0                0                0                0   \n",
       "76712                 0                0                0                0   \n",
       "216704                0                0                0                0   \n",
       "207558                0                0                0                0   \n",
       "193866                0                0                0                0   \n",
       "60477                 0                0                0                0   \n",
       "275363                0                0                0                0   \n",
       "84971                 0                0                0                0   \n",
       "307380                0                0                0                0   \n",
       "271037                0                0                0                1   \n",
       "108596                0                0                0                0   \n",
       "28917                 0                0                0                0   \n",
       "47600                 0                0                0                0   \n",
       "213304                0                0                0                0   \n",
       "62235                 0                0                0                0   \n",
       "177118                0                0                0                0   \n",
       "188336                0                0                0                0   \n",
       "22366                 0                0                0                0   \n",
       "216180                1                0                0                0   \n",
       "280829                0                0                0                0   \n",
       "234796                0                0                0                0   \n",
       "108923                0                0                0                0   \n",
       "255500                0                0                0                0   \n",
       "264876                0                0                0                0   \n",
       "70472                 0                0                0                0   \n",
       "...                 ...              ...              ...              ...   \n",
       "307123                0                0                0                0   \n",
       "307126                0                0                0                0   \n",
       "307133                0                0                0                0   \n",
       "307162                0                0                0                0   \n",
       "307177                0                0                0                0   \n",
       "307183                0                0                0                0   \n",
       "307248                0                0                0                0   \n",
       "307256                0                0                0                0   \n",
       "307266                0                0                0                0   \n",
       "307268                0                0                0                0   \n",
       "307283                0                0                0                0   \n",
       "307285                0                0                0                0   \n",
       "307288                0                0                0                0   \n",
       "307310                0                0                0                0   \n",
       "307323                0                0                0                0   \n",
       "307328                0                0                0                0   \n",
       "307363                0                0                0                0   \n",
       "307377                0                0                0                0   \n",
       "307383                0                0                0                0   \n",
       "307386                0                0                0                0   \n",
       "307407                0                0                0                0   \n",
       "307410                0                0                0                0   \n",
       "307433                0                0                0                0   \n",
       "307438                0                0                0                0   \n",
       "307446                0                0                0                0   \n",
       "307448                0                0                0                0   \n",
       "307475                0                0                0                0   \n",
       "307481                0                0                0                0   \n",
       "307489                0                0                0                0   \n",
       "307509                0                0                0                0   \n",
       "\n",
       "        FLAG_DOCUMENT_18  AMT_REQ_CREDIT_BUREAU_DAY  \\\n",
       "307396                 0                        0.0   \n",
       "97471                  0                        0.0   \n",
       "238573                 0                        1.0   \n",
       "240335                 0                        0.0   \n",
       "289530                 0                        0.0   \n",
       "78225                  0                        0.0   \n",
       "76712                  0                        0.0   \n",
       "216704                 0                        0.0   \n",
       "207558                 0                        0.0   \n",
       "193866                 0                        0.0   \n",
       "60477                  0                        0.0   \n",
       "275363                 0                        0.0   \n",
       "84971                  0                        0.0   \n",
       "307380                 0                        0.0   \n",
       "271037                 0                        0.0   \n",
       "108596                 0                        0.0   \n",
       "28917                  0                        0.0   \n",
       "47600                  0                        0.0   \n",
       "213304                 0                        0.0   \n",
       "62235                  0                        0.0   \n",
       "177118                 0                        0.0   \n",
       "188336                 0                        NaN   \n",
       "22366                  0                        0.0   \n",
       "216180                 0                        0.0   \n",
       "280829                 0                        0.0   \n",
       "234796                 0                        0.0   \n",
       "108923                 0                        0.0   \n",
       "255500                 0                        0.0   \n",
       "264876                 0                        0.0   \n",
       "70472                  0                        0.0   \n",
       "...                  ...                        ...   \n",
       "307123                 0                        0.0   \n",
       "307126                 0                        0.0   \n",
       "307133                 0                        0.0   \n",
       "307162                 0                        0.0   \n",
       "307177                 0                        0.0   \n",
       "307183                 0                        0.0   \n",
       "307248                 0                        2.0   \n",
       "307256                 0                        NaN   \n",
       "307266                 0                        0.0   \n",
       "307268                 0                        NaN   \n",
       "307283                 0                        0.0   \n",
       "307285                 0                        0.0   \n",
       "307288                 0                        NaN   \n",
       "307310                 0                        0.0   \n",
       "307323                 0                        0.0   \n",
       "307328                 0                        NaN   \n",
       "307363                 0                        0.0   \n",
       "307377                 0                        NaN   \n",
       "307383                 0                        0.0   \n",
       "307386                 0                        0.0   \n",
       "307407                 0                        0.0   \n",
       "307410                 0                        0.0   \n",
       "307433                 0                        0.0   \n",
       "307438                 0                        0.0   \n",
       "307446                 0                        NaN   \n",
       "307448                 0                        0.0   \n",
       "307475                 0                        0.0   \n",
       "307481                 0                        0.0   \n",
       "307489                 0                        0.0   \n",
       "307509                 0                        0.0   \n",
       "\n",
       "        AMT_REQ_CREDIT_BUREAU_WEEK  AMT_REQ_CREDIT_BUREAU_MON  \\\n",
       "307396                         0.0                        0.0   \n",
       "97471                          0.0                        0.0   \n",
       "238573                         0.0                        0.0   \n",
       "240335                         0.0                        0.0   \n",
       "289530                         0.0                        0.0   \n",
       "78225                          0.0                        0.0   \n",
       "76712                          0.0                        0.0   \n",
       "216704                         0.0                        1.0   \n",
       "207558                         0.0                        1.0   \n",
       "193866                         0.0                        0.0   \n",
       "60477                          0.0                        0.0   \n",
       "275363                         0.0                        0.0   \n",
       "84971                          0.0                        0.0   \n",
       "307380                         0.0                        0.0   \n",
       "271037                         0.0                        0.0   \n",
       "108596                         0.0                        0.0   \n",
       "28917                          0.0                        0.0   \n",
       "47600                          0.0                        0.0   \n",
       "213304                         0.0                        0.0   \n",
       "62235                          0.0                        0.0   \n",
       "177118                         0.0                        1.0   \n",
       "188336                         NaN                        NaN   \n",
       "22366                          0.0                        0.0   \n",
       "216180                         0.0                        0.0   \n",
       "280829                         0.0                        0.0   \n",
       "234796                         0.0                        0.0   \n",
       "108923                         0.0                        0.0   \n",
       "255500                         1.0                        0.0   \n",
       "264876                         0.0                        0.0   \n",
       "70472                          0.0                        0.0   \n",
       "...                            ...                        ...   \n",
       "307123                         0.0                        0.0   \n",
       "307126                         0.0                        0.0   \n",
       "307133                         0.0                        0.0   \n",
       "307162                         0.0                        1.0   \n",
       "307177                         0.0                        0.0   \n",
       "307183                         0.0                        1.0   \n",
       "307248                         0.0                        0.0   \n",
       "307256                         NaN                        NaN   \n",
       "307266                         0.0                        0.0   \n",
       "307268                         NaN                        NaN   \n",
       "307283                         0.0                        1.0   \n",
       "307285                         0.0                        0.0   \n",
       "307288                         NaN                        NaN   \n",
       "307310                         0.0                        0.0   \n",
       "307323                         0.0                        0.0   \n",
       "307328                         NaN                        NaN   \n",
       "307363                         0.0                        1.0   \n",
       "307377                         NaN                        NaN   \n",
       "307383                         0.0                        0.0   \n",
       "307386                         0.0                        0.0   \n",
       "307407                         0.0                        1.0   \n",
       "307410                         0.0                        0.0   \n",
       "307433                         0.0                        0.0   \n",
       "307438                         0.0                        0.0   \n",
       "307446                         NaN                        NaN   \n",
       "307448                         0.0                        0.0   \n",
       "307475                         0.0                        1.0   \n",
       "307481                         0.0                        0.0   \n",
       "307489                         0.0                        0.0   \n",
       "307509                         0.0                        0.0   \n",
       "\n",
       "        AMT_REQ_CREDIT_BUREAU_QRT  AMT_REQ_CREDIT_BUREAU_YEAR  \n",
       "307396                        1.0                         1.0  \n",
       "97471                         0.0                         0.0  \n",
       "238573                        0.0                         4.0  \n",
       "240335                        2.0                         2.0  \n",
       "289530                        0.0                         1.0  \n",
       "78225                         1.0                         3.0  \n",
       "76712                         0.0                         5.0  \n",
       "216704                        0.0                         2.0  \n",
       "207558                        0.0                         2.0  \n",
       "193866                        0.0                         1.0  \n",
       "60477                         1.0                         1.0  \n",
       "275363                        0.0                         3.0  \n",
       "84971                         0.0                         2.0  \n",
       "307380                        0.0                         4.0  \n",
       "271037                        0.0                         0.0  \n",
       "108596                        0.0                         4.0  \n",
       "28917                         1.0                         3.0  \n",
       "47600                         1.0                         8.0  \n",
       "213304                        0.0                         1.0  \n",
       "62235                         0.0                         0.0  \n",
       "177118                        0.0                         1.0  \n",
       "188336                        NaN                         NaN  \n",
       "22366                         0.0                         3.0  \n",
       "216180                        0.0                         0.0  \n",
       "280829                        0.0                         1.0  \n",
       "234796                        1.0                         0.0  \n",
       "108923                        2.0                         3.0  \n",
       "255500                        0.0                         2.0  \n",
       "264876                        0.0                         1.0  \n",
       "70472                         0.0                         3.0  \n",
       "...                           ...                         ...  \n",
       "307123                        3.0                         2.0  \n",
       "307126                        0.0                         0.0  \n",
       "307133                        0.0                         1.0  \n",
       "307162                        0.0                         3.0  \n",
       "307177                        0.0                         1.0  \n",
       "307183                        0.0                         2.0  \n",
       "307248                        0.0                         2.0  \n",
       "307256                        NaN                         NaN  \n",
       "307266                        0.0                         2.0  \n",
       "307268                        NaN                         NaN  \n",
       "307283                        0.0                         0.0  \n",
       "307285                        3.0                         1.0  \n",
       "307288                        NaN                         NaN  \n",
       "307310                        0.0                         2.0  \n",
       "307323                        0.0                         1.0  \n",
       "307328                        NaN                         NaN  \n",
       "307363                        0.0                         5.0  \n",
       "307377                        NaN                         NaN  \n",
       "307383                        0.0                         2.0  \n",
       "307386                        0.0                         7.0  \n",
       "307407                        0.0                         1.0  \n",
       "307410                        0.0                         2.0  \n",
       "307433                        0.0                         4.0  \n",
       "307438                        1.0                         2.0  \n",
       "307446                        NaN                         NaN  \n",
       "307448                        0.0                         2.0  \n",
       "307475                        0.0                         6.0  \n",
       "307481                        0.0                         3.0  \n",
       "307489                        1.0                         2.0  \n",
       "307509                        0.0                         0.0  \n",
       "\n",
       "[49650 rows x 63 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_removed_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(49650, 63)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_removed_all.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_removed_all.to_csv('app_train_removed_all_76.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Encoding on the train file**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=train_removed_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 columns were label encoded.\n"
     ]
    }
   ],
   "source": [
    "#Label Encoder\n",
    "\n",
    "# Create a label encoder object\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "le_count = 0\n",
    "\n",
    "# Iterate through the columns\n",
    "for col in train:\n",
    "    if train[col].dtype == 'object':\n",
    "        # If 2 or fewer unique categories\n",
    "        if len(list(train[col].unique())) <= 2:\n",
    "            # Train on the training data\n",
    "            le.fit(train[col])\n",
    "            # Transform both training and testing data\n",
    "            train[col] = le.transform(train[col])\n",
    "            #app_test[col] = le.transform(app_test[col])\n",
    "            \n",
    "            # Keep track of how many columns were label encoded\n",
    "            le_count += 1\n",
    "            \n",
    "print('%d columns were label encoded.' % le_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Features shape:  (49650, 180)\n"
     ]
    }
   ],
   "source": [
    "# One-Hot encoding of categorical variables\n",
    "\n",
    "train = pd.get_dummies(train)\n",
    "#app_test = pd.get_dummies(app_test)\n",
    "\n",
    "print('Training Features shape: ', train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Load test set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv('/Users/amy/Desktop/project data/application_test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SK_ID_CURR</th>\n",
       "      <th>NAME_CONTRACT_TYPE</th>\n",
       "      <th>CODE_GENDER</th>\n",
       "      <th>FLAG_OWN_CAR</th>\n",
       "      <th>FLAG_OWN_REALTY</th>\n",
       "      <th>CNT_CHILDREN</th>\n",
       "      <th>AMT_INCOME_TOTAL</th>\n",
       "      <th>AMT_CREDIT</th>\n",
       "      <th>AMT_ANNUITY</th>\n",
       "      <th>AMT_GOODS_PRICE</th>\n",
       "      <th>...</th>\n",
       "      <th>FLAG_DOCUMENT_18</th>\n",
       "      <th>FLAG_DOCUMENT_19</th>\n",
       "      <th>FLAG_DOCUMENT_20</th>\n",
       "      <th>FLAG_DOCUMENT_21</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n",
       "      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100001</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>568800.0</td>\n",
       "      <td>20560.5</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100005</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>99000.0</td>\n",
       "      <td>222768.0</td>\n",
       "      <td>17370.0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100013</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>202500.0</td>\n",
       "      <td>663264.0</td>\n",
       "      <td>69777.0</td>\n",
       "      <td>630000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100028</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>2</td>\n",
       "      <td>315000.0</td>\n",
       "      <td>1575000.0</td>\n",
       "      <td>49018.5</td>\n",
       "      <td>1575000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100038</td>\n",
       "      <td>Cash loans</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>625500.0</td>\n",
       "      <td>32067.0</td>\n",
       "      <td>625500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 121 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SK_ID_CURR NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR FLAG_OWN_REALTY  \\\n",
       "0      100001         Cash loans           F            N               Y   \n",
       "1      100005         Cash loans           M            N               Y   \n",
       "2      100013         Cash loans           M            Y               Y   \n",
       "3      100028         Cash loans           F            N               Y   \n",
       "4      100038         Cash loans           M            Y               N   \n",
       "\n",
       "   CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY  AMT_GOODS_PRICE  \\\n",
       "0             0          135000.0    568800.0      20560.5         450000.0   \n",
       "1             0           99000.0    222768.0      17370.0         180000.0   \n",
       "2             0          202500.0    663264.0      69777.0         630000.0   \n",
       "3             2          315000.0   1575000.0      49018.5        1575000.0   \n",
       "4             1          180000.0    625500.0      32067.0         625500.0   \n",
       "\n",
       "              ...             FLAG_DOCUMENT_18 FLAG_DOCUMENT_19  \\\n",
       "0             ...                            0                0   \n",
       "1             ...                            0                0   \n",
       "2             ...                            0                0   \n",
       "3             ...                            0                0   \n",
       "4             ...                            0                0   \n",
       "\n",
       "  FLAG_DOCUMENT_20 FLAG_DOCUMENT_21 AMT_REQ_CREDIT_BUREAU_HOUR  \\\n",
       "0                0                0                        0.0   \n",
       "1                0                0                        0.0   \n",
       "2                0                0                        0.0   \n",
       "3                0                0                        0.0   \n",
       "4                0                0                        NaN   \n",
       "\n",
       "   AMT_REQ_CREDIT_BUREAU_DAY  AMT_REQ_CREDIT_BUREAU_WEEK  \\\n",
       "0                        0.0                         0.0   \n",
       "1                        0.0                         0.0   \n",
       "2                        0.0                         0.0   \n",
       "3                        0.0                         0.0   \n",
       "4                        NaN                         NaN   \n",
       "\n",
       "   AMT_REQ_CREDIT_BUREAU_MON  AMT_REQ_CREDIT_BUREAU_QRT  \\\n",
       "0                        0.0                        0.0   \n",
       "1                        0.0                        0.0   \n",
       "2                        0.0                        1.0   \n",
       "3                        0.0                        0.0   \n",
       "4                        NaN                        NaN   \n",
       "\n",
       "   AMT_REQ_CREDIT_BUREAU_YEAR  \n",
       "0                         0.0  \n",
       "1                         3.0  \n",
       "2                         4.0  \n",
       "3                         3.0  \n",
       "4                         NaN  \n",
       "\n",
       "[5 rows x 121 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#train = pd.read_csv(\"C:/SHARYU/NEU/Unsupervised2/Project/application_train.csv/application_train.csv\",  header=0, sep=',', quotechar='\"')\n",
    "test_features = test\n",
    "#train_labels = train['TARGET']\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Encoding test set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 columns were label encoded.\n"
     ]
    }
   ],
   "source": [
    "#Label Encoder\n",
    "\n",
    "# Create a label encoder object\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "le_count = 0\n",
    "\n",
    "# Iterate through the columns\n",
    "for col in test:\n",
    "    if test[col].dtype == 'object':\n",
    "        # If 2 or fewer unique categories\n",
    "        if len(list(test[col].unique())) <= 2:\n",
    "            # Train on the training data\n",
    "            le.fit(test[col])\n",
    "            # Transform both training and testing data\n",
    "            test[col] = le.transform(test[col])\n",
    "            #app_test[col] = le.transform(app_test[col])\n",
    "            \n",
    "            # Keep track of how many columns were label encoded\n",
    "            le_count += 1\n",
    "            \n",
    "print('%d columns were label encoded.' % le_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Features shape:  (48744, 238)\n"
     ]
    }
   ],
   "source": [
    "# One-Hot encoding of categorical variables\n",
    "\n",
    "test = pd.get_dummies(test)\n",
    "\n",
    "\n",
    "print('Training Features shape: ', test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Align train test**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Features shape:  (49650, 177)\n",
      "Testing Features shape:  (48744, 176)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Align the training and testing data, keep only columns present in both dataframes\n",
    "train, test = train.align(test, join = 'inner', axis = 1)\n",
    "\n",
    "# Add the target back in\n",
    "train['TARGET'] = train_labels\n",
    "\n",
    "print('Training Features shape: ', train.shape)\n",
    "print('Testing Features shape: ', test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Impute missing values in train and test set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data shape:  (49650, 176)\n",
      "Testing data shape:  (48744, 176)\n"
     ]
    }
   ],
   "source": [
    "# Impute missing values\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler, Imputer\n",
    "\n",
    "# Drop the target from the training data\n",
    "if 'TARGET' in train:\n",
    "    train1 = train.drop(columns = ['TARGET'])\n",
    "else:\n",
    "    train1 = train.copy()\n",
    "    \n",
    "# Feature names\n",
    "features = list(train1.columns)\n",
    "\n",
    "# Copy of the testing data\n",
    "test1 = test.copy()\n",
    "\n",
    "# Median imputation of missing values\n",
    "imputer = Imputer(strategy = 'most_frequent')\n",
    "\n",
    "# Scale each feature to 0-1\n",
    "scaler = MinMaxScaler(feature_range = (0, 1))\n",
    "\n",
    "# Fit on the training data\n",
    "imputer.fit(train1)\n",
    "\n",
    "# Transform both training and testing data\n",
    "train1 = imputer.transform(train1)\n",
    "test1 = imputer.transform(test1)\n",
    "\n",
    "# Repeat with the scaler\n",
    "scaler.fit(train1)\n",
    "train1 = scaler.transform(train1)\n",
    "test1 = scaler.transform(test1)\n",
    "\n",
    "print('Training data shape: ', train1.shape)\n",
    "print('Testing data shape: ', test1.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(39720, 176) (39720,)\n",
      "(9930, 176) (9930,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# create training and testing vars\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(train1, train_labels, test_size=0.2)\n",
    "print (X_train.shape, y_train.shape)\n",
    "print (X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NEWLY ADDED "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'weights')"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x14293f048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Logistic Regrssion \n",
    "\n",
    "\n",
    "from sklearn.linear_model import Ridge, RidgeCV, Lasso, LassoCV\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "# RIDGE \n",
    "## create a list of alpha to test out \n",
    "alphas = 10**np.linspace(10,-2,100)*0.5\n",
    "\n",
    "\n",
    "##standardize the variables\n",
    "ridge = Ridge(normalize=True)\n",
    "coefs = []\n",
    "for a in alphas:\n",
    "    ridge.set_params(alpha=a)\n",
    "    ridge.fit(X_train, y_train)\n",
    "    coefs.append(ridge.coef_)\n",
    "    np.shape(coefs)\n",
    "\n",
    "# Plotting the L2 regularization\n",
    "ax = plt.gca()\n",
    "ax.plot(alphas, coefs)\n",
    "ax.set_xscale('log')\n",
    "plt.axis('tight')\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('weights')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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GIPwAQAAxiB8AACAMQgfAABgDMIHAAAYg/AB8JOwbds2xcbGurR21qxZmjVrlocnAmBFhA8AADAG4QPgurJnzx6NGTNGvXv31l133aVx48apuLjYac3Bgwd17733avHixYqJiVFMTIzS0tL07bffOtZcuHBBU6ZMUUxMjPr166f169c7zhUVFemxxx7TgAEDdOedd2ro0KHau3dvU10iAA8ifABcN86ePauUlBRNmjRJBw4c0AcffCC73a5ly5Y1WFtSUqIvvvhC2dnZ2rhxoz744AMtX77ccT4nJ0djxoxRTk6Opk6dqnnz5qmkpEQWE0XSAAACQklEQVSSlJycrMjISL3//vvKy8tTv3799PzzzzfVZQLwIMIHwHWjdevW2rlzp2JjY1VRUaGzZ8/qxhtvdATLD/n4+OhPf/qTgoODFRYWpgkTJmjHjh2O83379lWfPn3k4+OjYcOGyW6369SpU5Kk1157TcnJybLb7fr3v/+tG2644arPAeD64+ftAQDAVf7+/nr33Xf11ltvycfHR5GRkaqoqJCfX8M/ylq1aqUbb7zR8bhjx446d+6c43FISIjjv5s3by5Jqq+vlyTl5+crKSlJ58+fV3h4uFq3bi273e6pywLQhAgfANeNv//971q/fr02bNigW2+9VZI0d+5cnThxosHaS5cuqbq6WjabTZL01Vdf6aabbrrmc5SUlCglJUWvvPKK41Niu3fvVlZWViNeCQBv4aUuANeNS5cuqVmzZgoICJDdbte+ffv09ttvq7a2tsHa+vp6vfjii7p8+bI+//xzvfHGGxo5cuQ1n6OyslL19fWOYCosLHS8h+iHb44GcH3ijg+A68YDDzygw4cPa9iwYfL19dVtt92mRx55RBkZGVeNn1atWikuLk6SNGbMGE2YMOGaz3HbbbdpxowZmj59uqqrq9WhQweNHj1aCxcu1IkTJ3THHXc0+nUBaDo+dl64BvATc/DgQY0fP16fffaZt0cBYDG81AUAAIxB+AAAAGPwUhcAADAGd3wAAIAxCB8AAGAMwgcAABiD8AEAAMYgfAAAgDEIHwAAYAzCBwAAGIPwAQAAxiB8AACAMf4fkPlSwYS3GXgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f049f98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # LASSO \n",
    "from sklearn import linear_model\n",
    "from matplotlib.pyplot import *\n",
    "from sklearn import preprocessing\n",
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "alphas =10**np.linspace(10,-2,100)*0.5\n",
    "\n",
    "\n",
    "##standardize the variables\n",
    "lasso = Lasso(max_iter=10000, normalize=True)\n",
    "coefs = []\n",
    "for a in alphas:\n",
    "    lasso.set_params(alpha=a)\n",
    "    lasso.fit(X_train, y_train)\n",
    "    coefs.append(lasso.coef_)\n",
    "    np.shape(coefs)\n",
    "\n",
    "# Plotting the L2 regularization\n",
    "ax = plt.gca()\n",
    "ax.plot(alphas, coefs)\n",
    "ax.set_xscale('log')\n",
    "plt.axis('tight')\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('weights')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(39720, 50)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(X_train, y_train)\n",
    "model = SelectFromModel(lsvc, prefit=True)\n",
    "X_new = model.transform(X_train)\n",
    "X_new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Logistic Regression**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn import linear_model\n",
    "# logistic = linear_model.LogisticRegression(C=1e5)\n",
    "# logistic.fit(X_train, y_train)\n",
    "# predictionRes = logistic.predict(X_test)\n",
    "# logistic_score = logistic.score(X_test, y_test)\n",
    "# logistic_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.metrics import roc_curve\n",
    "# from sklearn.metrics import auc\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score for Logistic Regression: \", roc_auc)\n",
    "# plt.title('Receiver Operating Characteristic')\n",
    "# plt.plot(false_positive_rate, true_positive_rate, 'blue', label='AUC = %0.2f'% roc_auc)\n",
    "# plt.legend(loc='lower right')\n",
    "# plt.plot([0,1],[0,1],'m--')\n",
    "# plt.xlim([0,1])\n",
    "# plt.ylim([0,1.1])\n",
    "# plt.ylabel('True Positive Rate')\n",
    "# plt.xlabel('False Positive Rate')\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Plot the precision-recall curve\n",
    "\n",
    "# from sklearn.metrics import precision_recall_curve\n",
    "# precision, recall, thresholds = precision_recall_curve(y_test.tolist(), predictionRes)\n",
    "\n",
    "# plt.step(recall, precision, color='b', alpha=0.2,\n",
    "#          where='post')\n",
    "# plt.fill_between(recall, precision, step='post', alpha=0.2,\n",
    "#                  color='b')\n",
    "\n",
    "# plt.xlabel('Recall')\n",
    "# plt.ylabel('Precision')\n",
    "# plt.ylim([0.0, 1.05])\n",
    "# plt.xlim([0.0, 1.0])\n",
    "# plt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n",
    "#           average_precision))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**K-Nearest Neighbors**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.neighbors import KNeighborsClassifier\n",
    "# model = KNeighborsClassifier(n_neighbors=3)\n",
    "# model.fit(X_train, y_train)\n",
    "# predictionRes = model.predict(X_test)\n",
    "# print(\"Accuracy score:\" ,model.score(X_test,y_test))\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score : \", roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Plot the precision-recall curve\n",
    "\n",
    "# from sklearn.metrics import precision_recall_curve\n",
    "# precision, recall, thresholds = precision_recall_curve(y_test.tolist(), predictionRes)\n",
    "\n",
    "# plt.step(recall, precision, color='b', alpha=0.2,\n",
    "#          where='post')\n",
    "# plt.fill_between(recall, precision, step='post', alpha=0.2,\n",
    "#                  color='b')\n",
    "\n",
    "# plt.xlabel('Recall')\n",
    "# plt.ylabel('Precision')\n",
    "# plt.ylim([0.0, 1.05])\n",
    "# plt.xlim([0.0, 1.0])\n",
    "# plt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n",
    "#           average_precision))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Gaussian Naive Bayes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.naive_bayes import GaussianNB\n",
    "# model = GaussianNB()\n",
    "# model.fit(X_train, y_train)\n",
    "# predictionRes = model.predict(X_test)\n",
    "# print(\"Accuracy score:\" ,model.score(X_test,y_test))\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score : \", roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Adaboost**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.ensemble import AdaBoostClassifier\n",
    "# model = AdaBoostClassifier(random_state=1)\n",
    "# model.fit(X_train, y_train)\n",
    "# predictionRes = model.predict(X_test)\n",
    "# model.score(X_test,y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.metrics import roc_curve\n",
    "# from sklearn.metrics import auc\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score for Adaboost: \", roc_auc)\n",
    "# plt.title('Receiver Operating Characteristic')\n",
    "# plt.plot(false_positive_rate, true_positive_rate, 'blue', label='AUC = %0.2f'% roc_auc)\n",
    "# plt.legend(loc='lower right')\n",
    "# plt.plot([0,1],[0,1],'m--')\n",
    "# plt.xlim([0,1])\n",
    "# plt.ylim([0,1.1])\n",
    "# plt.ylabel('True Positive Rate')\n",
    "# plt.xlabel('False Positive Rate')\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Random Forest**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "# from sklearn.metrics import roc_curve\n",
    "# from sklearn.metrics import auc\n",
    "# model= RandomForestClassifier(n_estimators = 100, random_state = 50, verbose = 1, n_jobs = -1)\n",
    "# model.fit(X_train, y_train)\n",
    "# predictionRes = model.predict(X_test)\n",
    "# print(\"Accuracy score:\" ,model.score(X_test,y_test))\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score : \", roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Extra Trees Classification**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.ensemble import ExtraTreesClassifier\n",
    "# from sklearn import model_selection\n",
    "# seed = 7\n",
    "# num_trees = 100\n",
    "# max_features = 7\n",
    "# kfold = model_selection.KFold(n_splits=10, random_state=seed)\n",
    "# model = ExtraTreesClassifier(n_estimators=num_trees, max_features=max_features)\n",
    "# results = model_selection.cross_val_score(model, X_train, y_train, cv=kfold)\n",
    "# print(results.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Support Vector Machine Classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn import svm\n",
    "# model = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)  \n",
    "# predictionRes = model.predict(X_test)\n",
    "# print(\"Accuracy score:\" ,model.score(X_test,y_test))\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score : \", roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Bagging Classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.ensemble import BaggingClassifier\n",
    "# from sklearn import tree\n",
    "# model = BaggingClassifier(tree.DecisionTreeClassifier(random_state=1))\n",
    "# model.fit(X_train, y_train)\n",
    "# predictionRes = model.predict(X_test)\n",
    "# print(\"Accuracy score:\" ,model.score(X_test,y_test))\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score : \", roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Gradient Boosting (GBM)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.ensemble import GradientBoostingClassifier\n",
    "# model= GradientBoostingClassifier(learning_rate=0.01,random_state=1)\n",
    "# model.fit(X_train, y_train)\n",
    "# predictionRes = model.predict(X_test)\n",
    "# print(\"Accuracy score:\" ,model.score(X_test,y_test))\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score : \", roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes)\n",
    "# precision = precision_score(y_test.tolist(), predictionRes)\n",
    "# recall = recall_score(y_test.tolist(), predictionRes)\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes, digits=4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**LightGBM**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lgb_train = lgb.Dataset(data=X_train, label=y_train)\n",
    "# lgb_eval = lgb.Dataset(data=X_test, label=y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# params = {'task': 'train', 'boosting_type': 'dart', 'objective': 'binary', 'metric': 'auc', \n",
    "#           'learning_rate': 0.01, 'num_leaves': 70, 'num_iteration': 5000, 'verbose': 0 ,\n",
    "#           'colsample_bytree':.8, 'subsample':.9, 'max_depth':7, 'reg_alpha':.1, 'reg_lambda':.1, \n",
    "#           'min_split_gain':.01, 'min_child_weight':1}\n",
    "# model = lgb.train(params, lgb_train, valid_sets=lgb_eval, early_stopping_rounds=150, verbose_eval=200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predictionRes = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #print(\"Accuracy score:\" ,model.score(X_test,y_test))\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score : \", roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.metrics import roc_curve\n",
    "# from sklearn.metrics import auc\n",
    "# false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test.tolist(), predictionRes)\n",
    "# roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "# print(\"ROC score for LightGBM\", roc_auc)\n",
    "# plt.title('Receiver Operating Characteristic')\n",
    "# plt.plot(false_positive_rate, true_positive_rate, 'blue', label='AUC = %0.2f'% roc_auc)\n",
    "# plt.legend(loc='lower right')\n",
    "# plt.plot([0,1],[0,1],'m--')\n",
    "# plt.xlim([0,1])\n",
    "# plt.ylim([0,1.1])\n",
    "# plt.ylabel('True Positive Rate')\n",
    "# plt.xlabel('False Positive Rate')\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# # Precision score and Recall score using sklearn\n",
    "\n",
    "# from sklearn.metrics import precision_score\n",
    "# from sklearn.metrics import recall_score\n",
    "# from sklearn.metrics import average_precision_score\n",
    "# from sklearn.metrics import classification_report\n",
    "\n",
    "# average_precision = average_precision_score(y_test.tolist(), predictionRes.round())\n",
    "# precision = precision_score(y_test.tolist(), predictionRes.round())\n",
    "# recall = recall_score(y_test.tolist(), predictionRes.round())\n",
    "# print('Precision score : {0:0.2f}'.format(precision))\n",
    "# print('Recall score : {0:0.2f}'.format(recall))\n",
    "\n",
    "# # Print classification report using sklearn\n",
    "# print (classification_report(y_test.tolist(), predictionRes.round(), digits=4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Plot the precision-recall curve\n",
    "\n",
    "# from sklearn.metrics import precision_recall_curve\n",
    "# precision, recall, thresholds = precision_recall_curve(y_test.tolist(), predictionRes.round())\n",
    "\n",
    "# plt.step(recall, precision, color='b', alpha=0.2,\n",
    "#          where='post')\n",
    "# plt.fill_between(recall, precision, step='post', alpha=0.2,\n",
    "#                  color='b')\n",
    "\n",
    "# plt.xlabel('Recall')\n",
    "# plt.ylabel('Precision')\n",
    "# plt.ylim([0.0, 1.05])\n",
    "# plt.xlim([0.0, 1.0])\n",
    "# plt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n",
    "#           average_precision))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
